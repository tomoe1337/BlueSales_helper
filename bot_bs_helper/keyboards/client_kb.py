#from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from vk_maria.types import KeyboardMarkup as ReplyKeyboardMarkup, Button as KeyboardButton, Color
from vk_maria.types.keyboard import OpenLinkButton


kb_client = kb_client_number = kb_client_gold=kb_client_main_menu =kb_for_help=kb_for_contact_or_back=buy_menu=kb_for_staf=kb_chests=main_game_menu=jobs_menu=pick_map_menu = None
'''

b1 = KeyboardButton.Text(Color.PRIMARY,'–ó–æ–ª–æ—Ç–æ ü•á')
b2 = KeyboardButton.Text(Color.PRIMARY,'–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å üí≥')
b3 = KeyboardButton.Text(Color.PRIMARY,'–ü—Ä–æ—Ñ–∏–ª—å üìù')
b4 = KeyboardButton.Text(Color.PRIMARY,'–∫–µ–π—Å—ã üì¶')
b5 = KeyboardButton.Text(Color.PRIMARY,'–û—Ç–∑—ã–≤—ã üë•')
b6 = KeyboardButton.Text(Color.PRIMARY,'–î—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã üì¶')
b7 = KeyboardButton.Text(Color.PRIMARY,'–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞ üë§')



popoln = KeyboardButton.Text(Color.PRIMARY,'–ü–æ–ø–æ–ª–Ω–∏—Ç—å ü•á')
vivod = KeyboardButton.Text(Color.PRIMARY,'–í—ã–≤–µ—Å—Ç–∏ ü•á')
schet = KeyboardButton.Text(Color.PRIMARY,'–ü–æ—Å—á–∏—Ç–∞—Ç—å ü•á')
ochered = KeyboardButton.Text(Color.PRIMARY,'–û—á–µ—Ä–µ–¥—å üë§')
g_games = KeyboardButton.Text(Color.PRIMARY,'–ò–≥—Ä—ã üé≤')
main_menu = KeyboardButton.Text(Color.PRIMARY,'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è')


kb_chests  = kb_for_help = InlineKeyboardMarkup(row_width=2)
kb_client = ReplyKeyboardMarkup(resize_keyboard=True)
kb_client_number = ReplyKeyboardMarkup(resize_keyboard=True)
kb_client_gold = ReplyKeyboardMarkup(resize_keyboard=True)
kb_client_main_menu = ReplyKeyboardMarkup(one_time=True)


kb_client.add_button(b3)

kb_client.add_row()

kb_client.add_button(b4)
kb_client.add_button(b1)
kb_client.add_button(b2)




kb_client.row(b1,b2,b3).row(b4,b5,b6).add(b7)#.row(b1) #.row(b4,b5)
kb_client_gold.row(popoln,vivod).row(schet,ochered).row(g_games,main_menu)
kb_client_main_menu.add(main_menu)
kb_client_number.add(b4)
#kb_client.row(b1,b2,b3)

in1 = InlineKeyboardButton(text='1',callback_data = "help_1")
in2 = InlineKeyboardButton(text='2',callback_data = "help_2")
in3 = InlineKeyboardButton(text='3',callback_data = "help_3")
in4 = InlineKeyboardButton(text='4',callback_data = "help_4")
in5 = InlineKeyboardButton(text='5',callback_data = "help_5")
in6 = InlineKeyboardButton(text='6',callback_data = "help_6")
in7 = InlineKeyboardButton(text='7',callback_data = "help_7")
contack_help = InlineKeyboardButton(text='–°–≤—è–∑–∞—Ç—å—Å—è',callback_data = "help_8_")
back_help = InlineKeyboardButton(text='–ù–∞–∑–∞–¥',callback_data = "back_get_help")
for_first_staf = InlineKeyboardButton(text='1',callback_data = "first_staf_")

nachalo = InlineKeyboardButton(text='–ù–∞—á–∞–ª–æ',callback_data = "nach_chest_")
opit_chest = InlineKeyboardButton(text='–û–ø—ã—Ç–Ω—ã–π',callback_data = "opit_chest_")
god_chest = InlineKeyboardButton(text='–ë–æ–≥',callback_data = "god_chest_")
major_chest = InlineKeyboardButton(text='–ú–∞–∂–æ—Ä',callback_data = "major_chest_")
gold_chest = InlineKeyboardButton(text='–ó–æ–ª–æ—Ç–æ–π',callback_data = "gold_chest_")
free_chest = InlineKeyboardButton(text='–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π',callback_data = "free_chest_")



kb_chests.add(free_chest).add(nachalo).add(opit_chest).add(god_chest).add(major_chest).add(gold_chest)

kb_for_help = InlineKeyboardMarkup(row_width=2)
kb_for_contact_or_back = InlineKeyboardMarkup(row_width=2)

kb_for_contact_or_back.add(contack_help).add(back_help)
kb_for_help.row(in1,in2,in3).row(in4,in5,in6).add(in7,contack_help)

kb_for_staf=InlineKeyboardMarkup(row_width=2).insert(for_first_staf)

'''

CallbackButton = KeyboardButton.Callback
KeyboardButton = KeyboardButton.Text

kb_chests = ReplyKeyboardMarkup(inline = True)
kb_chests.add_button(CallbackButton(Color.PRIMARY,'–ù–∞—á–∞–ª–æ',payload = {'data': "nach_chest_"}))
kb_chests.add_row()
#kb_chests.add_button(CallbackButton(Color.PRIMARY,'–û–ø—ã—Ç–Ω—ã–π',payload = {'data': "opit_chest_"}))
#kb_chests.add_row()
#kb_chests.add_button(CallbackButton(Color.PRIMARY,'–ë–æ–≥',payload = {'data': "god_chest_"}))
#kb_chests.add_row()
#kb_chests.add_button(CallbackButton(Color.PRIMARY,'–ú–∞–∂–æ—Ä',payload = {'data': "major_chest_"}))
#kb_chests.add_row()
#kb_chests.add_button(CallbackButton(Color.PRIMARY,'–ó–æ–ª–æ—Ç–æ–π',payload = {'data': "gold_chest_"}))
#kb_chests.add_row()
kb_chests.add_button(CallbackButton(Color.PRIMARY,'–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π',payload = {'data': "free_chest_"}))





#trade_first_cb = ReplyKeyboardMarkup(inline = True)

#kb_chests.add_button(CallbackButton(Color.PRIMARY,'–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è',payload = {'data': "free_chest_"}))






kb_client_main_menu = ReplyKeyboardMarkup(one_time=False)
kb_client_main_menu.add_button(KeyboardButton(Color.PRIMARY,'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è'))

gardener_kb = ReplyKeyboardMarkup()

gardener_kb.add_button(KeyboardButton(Color.SECONDARY,"1"))
gardener_kb.add_button(KeyboardButton(Color.SECONDARY,"2"))
gardener_kb.add_button(KeyboardButton(Color.SECONDARY,"3"))
gardener_kb.add_row()
gardener_kb.add_button(KeyboardButton(Color.SECONDARY,"4"))
gardener_kb.add_button(KeyboardButton(Color.SECONDARY,"5"))
gardener_kb.add_button(KeyboardButton(Color.SECONDARY,"6"))
gardener_kb.add_row()

gardener_kb.add_button(KeyboardButton(Color.SECONDARY,"7"))
gardener_kb.add_button(KeyboardButton(Color.SECONDARY,"8"))
gardener_kb.add_button(KeyboardButton(Color.SECONDARY,"9"))
gardener_kb.add_row()

gardener_kb.add_button(KeyboardButton(Color.SECONDARY,"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è"))



def main_game_menu(jobs,bussines,home,maps,shops):
	gameMenu = ReplyKeyboardMarkup(one_time = False)
	gameMenu.add_button(KeyboardButton(Color.PRIMARY,"–†–∞–±–æ—Ç–∞ üí∏"))
	if shops != 0:
		if maps == "–ú–æ—Å–∫–≤–∞" or shops == 1:
			gameMenu.add_button(KeyboardButton(Color.PRIMARY,"–ú–∞–≥–∞–∑–∏–Ω üè™"))
		if maps == "–ü–∏—Ç–µ—Ä":
			gameMenu.add_button(KeyboardButton(Color.PRIMARY,"–ü–∞—Ä–∏—Ö–º–∞—Ö–µ—Ä—Å–∫–∞—è üè™"))
		if maps == "–°–æ—á–∏":
			gameMenu.add_button(KeyboardButton(Color.PRIMARY,"–ö–∞–∑–∏–Ω–æ $"))
	if bussines != 0:
		gameMenu.add_row()
		gameMenu.add_button(KeyboardButton(Color.PRIMARY,"–ë–∏–∑–Ω–µ—Å üè¢"))
	if home != 0:
		gameMenu.add_button(KeyboardButton(Color.PRIMARY,"–î–æ–º üè†"))
	if maps != 0:
		gameMenu.add_button(KeyboardButton(Color.PRIMARY,"–ö–∞—Ä—Ç–∞ üó∫"))
	gameMenu.add_row()
	gameMenu.add_button(KeyboardButton(Color.SECONDARY,"–î–æ–Ω–∞—Ç üí≥"))
	#gameMenu.add_button(KeyboardButton(Color.SECONDARY,"–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞ üë§"))
	return gameMenu

def pick_map_menu(maps):
	Mmenu = ReplyKeyboardMarkup()
	if maps != "–ú–æ—Å–∫–≤–∞":
		Mmenu.add_button(KeyboardButton(Color.PRIMARY,"–ú–æ—Å–∫–≤–∞"))
		Mmenu.add_row()
	if maps != "–ü–∏—Ç–µ—Ä":
		Mmenu.add_button(KeyboardButton(Color.PRIMARY,"–ü–∏—Ç–µ—Ä"))
		Mmenu.add_row()
	if maps != "–°–æ—á–∏":
		Mmenu.add_button(KeyboardButton(Color.PRIMARY,"–°–æ—á–∏"))
		Mmenu.add_row()
	Mmenu.add_button(KeyboardButton(Color.SECONDARY,"–ù–∞–∑–∞–¥"))
	return Mmenu



def jobs_menu(jobs):
	gameMenu = ReplyKeyboardMarkup()
	gameMenu.add_button(KeyboardButton(Color.PRIMARY, "–ü–æ—Ö–∏—â–µ–Ω–∏—è üï∏"))
	if jobs > 1:
		gameMenu.add_button(KeyboardButton(Color.PRIMARY,'–°–∞–¥–æ–≤–Ω–∏–∫ üå≥'))
	if jobs > 2:
		gameMenu.add_button(KeyboardButton(Color.PRIMARY,'–†–∞–±–æ—Ç–∞ –Ω–æ–º–µ—Ä 3'))
	gameMenu.add_row()
	gameMenu.add_button(KeyboardButton(Color.PRIMARY,'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è'))
	return gameMenu



def buy_menu(isUrl=True, url='',bill=''):
	qiwiMenu = ReplyKeyboardMarkup(inline = True)
	if isUrl:
		#btnUrlQIWI = InlineKeyboardButton(text="–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É", url=url)
		qiwiMenu.add_button(OpenLinkButton(link = url ,label = "–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É"))

	#btnCheckQIWI = InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="che—Åk_"+bill)	
	qiwiMenu.add_button(CallbackButton(Color.PRIMARY,"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", payload = {'data':"che—Åk_"+bill}))

	return qiwiMenu





