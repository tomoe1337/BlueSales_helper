from aiogram import types, Dispatcher
from create_bot import dp, bot
from keyboards import kb_client, kb_client_number,kb_client_gold,kb_client_main_menu , kb_for_help,kb_for_contact_or_back,buy_menu,kb_for_staf,kb_chests,main_game_menu,jobs_menu,pick_map_menu
from aiogram.types import ReplyKeyboardRemove
from data_base import sqlite_db
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton , ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher import FSMContext
from pyqiwip2p import QiwiP2P

from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Text
import random , math
import datetime
from dateutil.relativedelta import relativedelta, MO
from PIL import Image
import io,os

admin_chat_id = 411033951
key_qiwi = 'eyJ2ZXJzaW9uIjoiUDJQIiwiZGF0YSI6eyJwYXlpbl9tZXJjaGFudF9zaXRlX3VpZCI6InZncnY0NC0wMCIsInVzZXJfaWQiOiI3OTYxMDcxMDgwMiIsInNlY3JldCI6ImEyNzc5Y2U4N2M1MWI4OWM5NjZkYTE0MDg2ZDkzMjZhM2I5MjViNTA5NTVjYTg3NGVkMjZlODQyOWQ0MDI0YTkifX0='
p2p = QiwiP2P(auth_key=key_qiwi)
db = sqlite_db.Database('qiwi_base.db')

def charecter_img(user_id,skin = None,backround = None,new_glasses = None,new_body = None, new_hair = None):
	user_data = db.about_user(user_id)[0]
	if skin == None:
		skin,body,hairstyle,glasses = user_data[3],user_data[13],user_data[4],user_data[14]
	else:
		body,hairstyle,glasses = user_data[13],user_data[4],user_data[14]

	if skin== "—Å–≤–µ—Ç–ª—ã–π":
		skin = "skin_white"
	if skin == "—Ç–µ–º–Ω—ã–π":
		skin = "skin_black"

	skin_img = Image.open(f"skin/{skin}.png", mode='r')
	hair_img = Image.open(f"skin/{hairstyle}.png",mode='r')
	#img = Image.alpha_composite(skin_img,hair_img)
	if backround != None:
		backround_img = Image.open(f"skin/{backround}.png", mode='r')
		img = Image.alpha_composite(backround_img,skin_img)
	if new_hair == None:
		hair_img = Image.open(f"skin/{hairstyle}.png",mode='r')
		if backround == None:
			img = Image.alpha_composite(skin_img,hair_img)
		else:
			img = Image.alpha_composite(img,hair_img)
	else:
		hair_img = Image.open(f"skin/{new_hair}.png",mode='r')
		if backround == None:
			img = Image.alpha_composite(skin_img,hair_img)
		else:
			img = Image.alpha_composite(img,hair_img)

	if new_body == None:
		if body != None:
			body_img = Image.open(f"skin/{body}.png",mode='r')
			img = Image.alpha_composite(img,body_img)
	else:
		body_img = Image.open(f"skin/{new_body}.png",mode='r')
		img = Image.alpha_composite(img,body_img)

	if new_glasses == None:
		if glasses != None:
			glasses_img = Image.open(f"skin/{glasses}.png",mode='r')
			img = Image.alpha_composite(img,glasses_img)
	else:
		glasses_img = Image.open(f"skin/{new_glasses}.png",mode='r')
		img = Image.alpha_composite(img,glasses_img)

	img_byte_arr = io.BytesIO()
	img.save(img_byte_arr, format='PNG')
	img_byte_arr = img_byte_arr.getvalue()
	return img_byte_arr	





#@dp.message_handler(text(–ü–æ—Ñ–∏–ª—å))
async def prifile(message : types.Message):
	if db.user_exists(message.from_user.id)==False:
		db.add_user(message.from_user.id)
	kb_prifli = InlineKeyboardMarkup()\
	.add(InlineKeyboardButton(text = "–†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê", callback_data = "referr_system_"))\
	.add(InlineKeyboardButton(text = "–ü–†–û–ú–û–ö–û–î", callback_data = "promo_key_"))\
	.add(InlineKeyboardButton(text = "–¢–û–ü –ù–ï–î–ï–õ–ò", callback_data = "top_week_"))\
	.add(InlineKeyboardButton(text = "–¢–û–ü –ú–ï–°–Ø–¶–ê", callback_data = "top_month_"))
	await bot.send_message(message.from_user.id,f"üîë ID: {message.from_user.id}\nüë§ –ù–∏–∫–Ω–µ–π–º: {message.from_user.username}\nüí∏ –ë–∞–ª–∞–Ω—Å: {db.user_money(message.from_user.id)} —Ä—É–±.\nüí∞ –ó–æ–ª–æ—Ç–æ: {db.user_gold(message.from_user.id)}\n‚è∞ –ó–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã–≤–æ–¥ –∑–æ–ª–æ—Ç–∞: {db.user_calls_gold(message.from_user.id)}\nüíµ –ö—É–ø–ª–µ–Ω–æ –∑–æ–ª–æ—Ç–∞: {db.user_gold_all_time(message.from_user.id)} –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è",reply_markup = kb_prifli)


class promo(StatesGroup):
	key = State()

async def promo_key (callback:types.CallbackQuery):
	await callback.message.delete()
	await bot.send_message(callback.from_user.id,"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥")
	await promo.key.set()

async def chek_promo(message:types.Message, state = FSMContext):
	keys = []
	for key in (db.all_promo()):
		keys.append(key[1])
	if message.text in keys:
		user_gold = db.user_gold(message.from_user.id)
		db.set_gold(message.from_user.id, user_gold+30)
		db.del_key(f"{message.text}")
		await bot.send_message(message.from_user.id,'–í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ 30G!')
		await state.finish()	
	else:
		await bot.send_message(message.from_user.id,"–î–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
		await state.finish()

class promo_add(StatesGroup):
	key = State()
async def add_new_key(message:types.Message):
	if message.chat.id == admin_chat_id:
		await bot.send_message(admin_chat_id,"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å")
		await promo_add.key.set()
	else:
		await bot.send_message(message.from_user.id,'–ù–µ –ø–æ–Ω–∏–º–∞—é –æ —á–µ–º –≤—ã. –ù–∞–∂–º–∏—Ç–µ /start')

async def add_this_key(message:types.Message, state = FSMContext):
	if (message.text).lower() != '–æ—Ç–º–µ–Ω–∞':
		db.add_key(message.text)
		await bot.send_message(admin_chat_id,f"–ü—Ä–æ–º–æ–∫–æ–¥ {message.text} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
		await state.finish()
	else:
		await bot.send_message(admin_chat_id,"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
		await state.finish()



async def top_week (callback:types.CallbackQuery):
	await callback.message.delete()
	top =(db.show_top_week())
	cnt = 1
	text = ''
	for i in top:
		top_id = i [1]
		top_gold = i[2]
		if top_id == callback.from_user.id:
			my_pos= cnt
		if cnt<=10:
			text = text+(f'{cnt}. {top_id} - {top_gold} G\n')
			cnt += 1
	try:
		to_up=(top[my_pos-2][2])-top[my_pos-1][2]
	except:
		to_up = 0
	try:
		x = my_pos
		await bot.send_message(callback.from_user.id,f"–¢–æ–ø –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤ –Ω–µ–¥–µ–ª–∏:\n{text}")
		await bot.send_message(callback.from_user.id,f"–í—ã –Ω–∞ {my_pos} –º–µ—Å—Ç–µ.–ß—Ç–æ–±—ã –æ–±–æ–≥–Ω–∞—Ç—å —Å–ª–µ–¥—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–∞–º –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å {to_up} G.")
	except:
		await bot.send_message(callback.from_user.id,f"–¢–æ–ø –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤ –Ω–µ–¥–µ–ª–∏:\n{text}")
	set_data =datetime.datetime.strptime(db.time_week(1), "%Y-%m-%d %H:%M:%S")
	if (datetime.datetime.now().day-set_data.day)>=7:
		today = datetime.date.today()
		next_monday = today + relativedelta(weekday=MO(+1))
		db.set_week(1,set_data.replace(minute = 0,hour = 0,day=next_monday.day))
		db.set_top_week()
		print("Top week was set")


async def top_month (callback:types.CallbackQuery):
	await callback.message.delete()
	top =(db.show_top_month())
	cnt = 1
	text = ''
	for i in top:
		top_id = i [1]
		top_gold = i[2]
		if top_id == callback.from_user.id:
			my_pos= cnt
		if cnt<=10:
			text = text+(f'{cnt}. {top_id} - {top_gold} G\n')
			cnt += 1
	try:
		to_up=(top[my_pos-2][2])-top[my_pos-1][2]
	except:
		to_up = 0
	try:
		x = my_pos
		await bot.send_message(callback.from_user.id,f"–¢–æ–ø –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤ –º–µ—Å—è—Ü–∞:\n{text}")
		await bot.send_message(callback.from_user.id,f"–í—ã –Ω–∞ {my_pos} –º–µ—Å—Ç–µ.–ß—Ç–æ–±—ã –æ–±–æ–≥–Ω–∞—Ç—å —Å–ª–µ–¥—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–∞–º –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å {to_up} G.")
	except:
		await bot.send_message(callback.from_user.id,f"–¢–æ–ø –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤ –º–µ—Å—è—Ü–∞:\n{text}")
	set_data =datetime.datetime.strptime(db.time_month(1), "%Y-%m-%d %H:%M:%S")
	if set_data.month <datetime.datetime.now().month:
		try:
			datetime.datetime.now().replace(minute = 0,hour = 0,day= 1 ,month=set_data.month+1)
			new = set_data.month+1
		except:
			new = (set_data.month+1)-12
		db.set_month(1,set_data.replace(minute = 0,hour = 0,day= 1 ,month=new))
		db.set_top_month()
		print("Top month was set")


async def referr_system (callback:types.CallbackQuery):
	await callback.message.delete()
	name_bot = 'Example_Lil_Store_bot'
	await bot.send_message(callback.from_user.id,f"‚ù§ –ó–∞ –∫–∞–∂–¥—É—é –ø–æ–∫—É–ø–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 5 –∑–æ–ª–æ—Ç–∞\nüî• –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: https://t.me/{name_bot}?start={callback.from_user.id}\nüë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {db.count_referals(callback.from_user.id)}")


def is_number(_str):
	try:
		int(_str)
		return True
	except ValueError:
		return False


















def start_game_menu(user_id):
	user_data = db.about_user(message.from_user.id)[0]

#@dp.message_handler(commands=['start','help'])
#main_func
async def commands_start(message : types.Message):
	try:
		if db.user_exists(message.from_user.id)==False:
			start_command = message.text 
			referrer_id = str(start_command[7:])
			if str(referrer_id) != "":
				if str(referrer_id) != str(message.from_user.id):
					db.create_user(message.from_user.id,referrer_id)
					#db.create_wardrobe(message.from_user.id)
				try:
					money =random.randint(10000,30000)
					mamont_name = message.from_user.username
					if mamont_name == None:
						mamont_name = message.from_user.id
					db.set_gold(referrer_id,db.user_gold(referrer_id)+money)
					await bot.send_message(referrer_id,f"–¢—ã –ø–æ—Ö–∏—Ç–∏–ª {mamont_name} –∏ –ø—Ä–æ–¥–∞–ª –∑–∞ {money} –∑–æ–ª–æ—Ç–∞ü•á")
				except Exception as err:
					print(err)

			else:
				db.create_user(message.from_user.id)
				#db.create_wardrobe(message.from_user.id)

		if db.about_user(message.from_user.id)[0][3] == None:
			await bot.send_message(message.from_user.id,"–ü—Ä–∏–≤–µ—Ç, –≤–∏–∂—É —É —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç —á–µ–ª–æ–≤–µ—á–∫–∞ –≤ –±–æ—Ç–µ!\n\n–¥–∞–≤–∞–π —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏–º.",reply_markup = InlineKeyboardMarkup().add(InlineKeyboardButton(text = "—Å–æ–∑–¥–∞—Ç—å —á–µ–ª–æ–≤–µ—á–∫–∞", callback_data = "create_humans_")))

		else:
			user_data = db.about_user(message.from_user.id)[0]

			await bot.send_photo(message.from_user.id,charecter_img(message.from_user.id)) #send_photo_main


			if user_data[6] in ("–ú–æ—Å–∫–≤–∞","–ü–∏—Ç–µ—Ä","–°–æ—á–∏"):
				start_string = f'–ü—Ä–∏–≤–µ—Ç,{user_data[1]}!\n–°–µ–π—á–∞—Å —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –≥–æ—Ä–æ–¥–µ "{user_data[6]}"\n–£ —Ç–µ–±—è –µ—Å—Ç—å {user_data[12]} –∑–æ–ª–æ—Ç–∞ü•á'
			else:
				start_string = f"–ü—Ä–∏–≤–µ—Ç,{user_data[1]}!–°–µ–π—á–∞—Å —É —Ç–µ–±—è –µ—Å—Ç—å {user_data[12]} –∑–æ–ª–æ—Ç–∞ü•á"

			if user_data[23] < 10:#level
				if user_data[23] == 0:
					start_string += '\n–ü–æ–∫–∞ —Ç–µ–±–µ –º–∞–ª–æ —á—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ.–ó–∞–π–¥–∏ –≤ –º–µ–Ω—é —Ä–∞–±–æ—Ç—ã, –∏ –ø—Ä–æ—á–∏—Ç–∞–π –ø—Ä–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–±–µ —Ä–∞–±–æ—Ç—ã, —á—Ç–æ–±—ã –æ—Ç–∫—ã—Ç—å –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏'
				elif user_data[23] == 1:
					start_string += '\n–¢—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –º–∞–≥–∞–∑–∏–Ω!–ó–∞–π–¥–∏ –≤ –Ω–µ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ!'
				elif user_data[23] == 2:
					start_string += '\n–ó–∞–π–¥–∏ –≤ –º–µ–Ω—é —Ä–∞–æ—Ç—ã, –∏ –ø–æ–ø—Ä–æ–±—É–π –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –Ω–æ–≤–æ–π —Ä–∞–±–æ—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É!'
				
				elif user_data[23] == 3:
					start_string += '\n\n–¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–∫–∞ –∫–∞—Ä—Ç–∞ –∏ —Ç—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è –ø–æ —Ä–∞–∑–Ω—ã–º –≥–æ—Ä–æ–¥–∞–º!–¢–≤–æ–µ —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –ü–∏—Ç—Ä–µ –∏ –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ –ø–∞—Ä–µ—Ö–º–∞—Ö–µ—Ä—Å–∫—É—é!'
				elif user_data[23] == 4:
					pass
				elif user_data[23] == 5:
					start_string += '\n\n–¢–≤–æ–µ —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ.–û—Ç–ø—Ä–∞–≤—å—Å—è –≤ –°–æ—á–∏, –∑–∞–π–¥–∏ –≤ –∫–∞–∑–∏–Ω–æ –∏ –≤—ã–∏–≥—Ä–∞–π –≤ –∏–≥—Ä–µ "–ë–∞—à–Ω—è"'

			await bot.send_message(message.from_user.id,start_string,reply_markup= main_game_menu(user_data[9],user_data[8],user_data[7],user_data[6],user_data[10]))
	except Exception as err:
		print(err)
		await message.reply("–û–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –ª—Å, –ø–∏—à–∏ –µ–º—É")
#########################create char########################################
class create_char(StatesGroup):
	skin = State()
	hairstyle = State()
	name = State()
	gender = State()

async def pick_char_skin_man (callback:types.CallbackQuery,state: FSMContext):
	await callback.message.delete()
	await create_char.skin.set()
	kb_skin_char = ReplyKeyboardMarkup(resize_keyboard=True)\
	.add(KeyboardButton("—Å–≤–µ—Ç–ª—ã–π"),KeyboardButton("—Ç–µ–º–Ω—ã–π"))\
	.add(KeyboardButton("—è –Ω–µ –º—É–∂–∏–∫ üò°"))
	async with state.proxy() as data:
		data['gender'] = "classic"
	await bot.send_message(callback.from_user.id,"–æ–∫–µ–π, –Ω–∞—á–Ω–µ–º —Å –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞ –∫–æ–∂–∏:",reply_markup = kb_skin_char)

async def pick_char_skin_gender (message:types.Message, state: FSMContext):

	if message.text == "—Å–≤–µ—Ç–ª—ã–π" or message.text == "—Ç–µ–º–Ω—ã–π":

		async with state.proxy() as data:
			data['skin'] = message.text
			if data['gender'] == "classic" or gender == "man":
				data['gender'] = "man"
			else:
				data['gender']="wooman"
			ph = 'AgACAgIAAxkBAAIm12LuvsJhWPKRdfpH6-CG1PAcuZxWAAIMwDEb7ZJ5S_aB2Ysvj7K8AQADAgADcwADKQQ'
			kb = InlineKeyboardMarkup()\
			.add(InlineKeyboardButton(text = 'üîº', callback_data = 'pick_hirestyle first'),InlineKeyboardButton(text = 'üîº', callback_data = 'pick_hirestyle second'),InlineKeyboardButton(text = 'üîº', callback_data = 'pick_hirestyle three'))\
			.add(InlineKeyboardButton(text = '–ù–∏—á–µ–≥–æ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è',callback_data = 'pick_hirestyle skin_head'))

			await bot.send_photo(message.from_user.id,ph,"–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∏—á–µ—Å–∫—É",reply_markup = kb)
			await create_char.next()

	elif message.text == "—è –Ω–µ –º—É–∂–∏–∫ üò°":
		kb_skin_wooman = ReplyKeyboardMarkup(resize_keyboard=True)\
		.add(KeyboardButton("—Å–≤–µ—Ç–ª—ã–π"),KeyboardButton("—Ç–µ–º–Ω—ã–π"))\
		.add(KeyboardButton("—è –Ω–µ –¥–µ–≤–∫–∞ üò°"))		
		async with state.proxy() as data:
			if data['gender']=="classic":
				ok = True
				data['gender'] = "wooman"
				await bot.send_message(message.from_user.id,"–û–π, –ø—Ä–æ—Å—Ç–∏ ‚òπ\n\n–≤—ã–±–∏—Ä–∞–π —Ü–≤–µ—Ç –∫–æ–∂–∏",reply_markup = kb_skin_wooman)
			else:
				data['gender'] = "wooman"
				await bot.send_message(message.from_user.id,"–ù—É –µ–∫ –º–∞–∫–∞—Ä–µ–∫, —Ç—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Å—å —É–∂–µ...\n\n–≤—ã–±–∏—Ä–∞–π —Ü–≤–µ—Ç –∫–æ–∂–∏",reply_markup = kb_skin_wooman)

	elif message.text == "—è –Ω–µ –¥–µ–≤–∫–∞ üò°":
		async with state.proxy() as data:
			data['gender'] = "man"
			kb_skin_char = ReplyKeyboardMarkup(resize_keyboard=True)\
			.add(KeyboardButton("—Å–≤–µ—Ç–ª—ã–π"),KeyboardButton("—Ç–µ–º–Ω—ã–π"))\
			.add(KeyboardButton("—è –Ω–µ –º—É–∂–∏–∫ üò°"))
			await bot.send_message(message.from_user.id,"–ù—É –µ–∫ –º–∞–∫–∞—Ä–µ–∫, —Ç—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Å—å —É–∂–µ...\n\n–≤—ã–±–∏—Ä–∞–π —Ü–≤–µ—Ç –∫–æ–∂–∏",reply_markup = kb_skin_char)
	else:
		await bot.send_message(message.from_user.id,"–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!")
#########################################hairstyle#############################

async def pick_hairstyle(callback:types.CallbackQuery, state: FSMContext):
	await callback.message.delete()

	hairstyle = callback['data'].replace('pick_hirestyle ','',1)
	async with state.proxy() as data:
		data['hairstyle'] = hairstyle
		await bot.send_message(callback.from_user.id,"–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∏–º—è —Å–≤–æ–µ–≥–æ —á–µ–ª–æ–≤–µ—á–∫–∞")
		await create_char.next()

async def pick_name_char(message:types.Message,state:FSMContext):
	async with state.proxy() as data:
		data['name'] = message.text
		if data['gender'] == 'man':
			you = '–∑–∞–∫–æ–Ω—á–∏–ª'
		else:
			you = '–∑–∞–∫–æ–Ω—á–∏–ª–∞'
		#global referrer_id_
		#if 'referrer_id_' in globals():
		#	db.add_user(message.from_user.id,data['skin'],data['gender'],data['hairstyle'],data['name'],referrer_id_)
		#	try:
		#		await bot.send_message(referrer_id_,'–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!')
		#	except:
		#		pass
		db.add_user(message.from_user.id,data['skin'],data['gender'],data['hairstyle'],data['name'])
		await state.finish()
		await bot.send_message(message.from_user.id,f'–°—É–ø–µ—Ä, {message.text}, —Ç—ã {you} —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n–ú–æ–∂–µ—à—å –Ω–∞—á–∏–Ω–∞—Ç—å –∏–≥—Ä–∞—Ç—å, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏,–ø–æ–∫—É–ø–∞—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –∏ –≤—Å–µ —á—Ç–æ —Ö–æ—á–µ—à—å.–ù–∞–∂–º–∏ /start')

async def change_can (message:types.Message):
	a = [1,2,3]
	kb = ReplyKeyboardMarkup()
	if 1 in a:
		kb.row(KeyboardButton(text = '1'))
	if 5 in a:
		kb.insert(KeyboardButton(text = '5'))
	if 3 in a:
		kb.insert(KeyboardButton(text = '3'))

	if 2 in a:
		kb.row(KeyboardButton(text = '2'))
	#db.set_user_data(message.from_user.id,'can_job','–±–æ–º–∂')
	await bot.send_message(message.from_user.id,'–¢—ã –ø–æ–º–µ–Ω—è–ª —Ä–∞–±–æ—Ç—É',reply_markup = kb)


async def jobs(message:types.Message):
	if db.about_user(message.from_user.id) != 0:
		await bot.send_message(message.from_user.id,"–í—ã–±–µ—Ä–∏ –∫–µ–º —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å:",reply_markup = jobs_menu(db.about_user(message.from_user.id)[0][9]))
	else:
		await bot.send_message(message.from_user.id,'–¢–µ–±–µ –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è')



async def scam_info(message:types.Message):
	lvl = db.about_user(message.from_user.id)[0][9]
	if lvl >= 0:
		text = "–¢—ã –º–æ–∂–µ—à—å –ø–æ—Ö–∏—â–∞—Ç—å –∏ –ø—Ä–æ–¥–æ–≤–∞—Ç—å –ª—é–¥–µ–π –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–π–¥—É—Ç –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ!\n–ó–∞ –∫–∞–∂–¥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –∏–≥—Ä–∞–µ—Ç –≤ –±–æ—Ç–∞ —Ç—ã –ø–æ–ª—É—á–∏—à—å —Ä–∞–Ω–¥–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞\n\n–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ—é —Å—Å—ã–ª–∫—É –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é!"
		await bot.send_message(message.from_user.id,text,reply_markup = ReplyKeyboardMarkup(resize_keyboard=True)\
			.row(KeyboardButton(text="–ú–æ—è —Å—Å—ã–ª–∫–∞ üîó"),KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è")))
	else:
		await bot.send_message(message.from_user.id,"–≠—Ç–æ –µ—â–µ —Ç–µ–±–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ")

async def show_my_scam_link(message:types.Message):
	user_data = db.about_user(message.from_user.id)[0]
	if user_data[9] >= 0:
		name_bot = 'Example_Lil_Store_bot'
		text = f"–ó–∞ –∫–∞–∂–¥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã –ø–æ–π–º–∞–µ—à—å –≤ –ª–æ–≤—É—à–∫—É —Ç—ã –ø–æ–ª—É—á–∏—à—å —Ä–∞–Ω–¥–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞\n\n–í–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞: https://t.me/{name_bot}?start={message.from_user.id}"
		if user_data[23] == 0:
			text+='\n\n–¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏ —É–∑–Ω–∞–ª –æ –¥–æ—Å—É—Ç–ø–Ω–æ–π —Ç–µ–±–µ —Ä–∞–±–æ—Ç–µ!\n–¢–≤–æ—è –Ω–∞–≥—Ä–∞–¥–∞:\n1.300 –∑–æ–ª–æ—Ç–∞ü•á\n2.–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –º–∞–≥–∞–∑–∏–Ω (–≤—ã–π–¥–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—è, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ–≥–æ)'
			db.set_user_data(message.from_user.id,'gold',300)
			db.set_user_data(message.from_user.id,'can_shop',1)
			db.set_user_data(message.from_user.id,'can_job',1)
			db.set_user_data(message.from_user.id,'Level_task',1)
		await bot.send_message(message.from_user.id,text,reply_markup=kb_client_main_menu)
	else:
		await bot.send_message(message.from_user.id,"–≠—Ç–æ –µ—â–µ —Ç–µ–±–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ")

class gardener_job_state(StatesGroup):
	point = State()

async def gardener_job(message:types.Message,state:FSMContext):
	if db.about_user(message.from_user.id)[0][9]>=2:
		point = random.randint(1,9)

		await gardener_job_state.point.set()
		async with state.proxy() as data:
			data['point'] = point
		kb = ReplyKeyboardMarkup(resize_keyboard = True)\
		.row(KeyboardButton("1"),KeyboardButton("2"),KeyboardButton("3"))\
		.row(KeyboardButton("4"),KeyboardButton("5"),KeyboardButton("6"))\
		.row(KeyboardButton("7"),KeyboardButton("8"),KeyboardButton("9"))\
		.add(KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è"))
		with open(f'skin/mole_game/mole{point}.png','rb') as ph:
			await bot.send_photo(message.from_user.id,ph)

		await bot.send_message(message.from_user.id,"–ì–¥–µ –∫—Ä–æ—Ç?",reply_markup = kb)
	else:
		await bot.send_message(message.from_user.id,"–í–∞–º —ç—Ç–æ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")

#db.set_user_data(message.from_user.id,"gold",user_data[12]+b_account_data["on_account"])
async def gardener_job_pick(message:types.Message,state:FSMContext):
	if message.text not in '123456789' and message.text!='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è' :
		await bot.send_message(message.from_user.id,"–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!")
	elif message.text != '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è':
		async with state.proxy() as data:
			point = data['point']
			if int(message.text) == point:
				user_data = db.about_user(message.from_user.id)[0]
				salary = random.randint(50,100)
				db.set_user_data(message.from_user.id,"gold",user_data[12]+salary)
				await bot.send_message(message.from_user.id,f'–ï–µ —Ç—ã –ø–æ–ø–∞–ª, –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª {salary} —Ç—É–≥—Ä–∏–∫')
				if user_data[9] == 2 and True:
					db.set_user_data(message.from_user.id,'Level_task',3)
					db.set_user_data(message.from_user.id,'can_map','–ú–æ—Å–∫–≤–∞')
					db.set_user_data(message.from_user.id,'can_shop',2)										
					db.set_user_data(message.from_user.id,'gold',user_data[12]+500)
					await state.finish()
					return await bot.send_message(message.from_user.id,'–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\n\n–ù–∞–≥—Ä–∞–¥–∞:\n1.500 –∑–æ–ª–æ—Ç–∞ü•á\n2.–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∫–∞—Ä—Ç–∞!',reply_markup = ReplyKeyboardMarkup(resize_keyboard = True).row(KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è'),KeyboardButton('–°–∞–¥–æ–≤–Ω–∏–∫ üå≥')))
					
			else:
				await bot.send_message(message.from_user.id,'–ù—É –∏ –º–∞–∑–∏–ª–∞...')
			await state.finish()
			await gardener_job(message,state)
	else:
		await state.finish()
		await commands_start(message)

class set_my_map(StatesGroup):
	new_map = State()

async def show_map(message:types.Message):
	user_data = db.about_user(message.from_user.id)[0]
	if user_data[6]==0:
		await bot.send_message(message.from_user.id,"–≠—Ç–æ —Ç–µ–±–µ –µ—â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ")
	else:
		await set_my_map.new_map.set()
		await bot.send_photo(message.from_user.id,"AgACAgIAAxkBAAIs42MBYsX89uO6p3WxWZHV9ik8BRKpAAKSwjEbcu0JSLqpnJ86xRGaAQADAgADcwADKQQ",f'{user_data[1]},—Å–µ–π—á–∞—Å —Ç—ã –≤ –≥–æ—Ä–æ–¥–µ "{user_data[6]}"\n–í—ã–±–µ—Ä–∏ –∫—É–¥–∞ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–µ—Ö–∞—Ç—å',reply_markup = pick_map_menu(user_data[6]))

async def pick_new_map (message:types.Message,state:FSMContext):
	user_data = db.about_user(message.from_user.id)[0]
	user_map = user_data[6]
	new_map = message.text
	if user_data[23] < 4 and new_map == '–°–æ—á–∏':
		await bot.send_message(message.from_user.id,'–≠—Ç–æ —Ç–µ–±–µ –µ—â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ')
		return await state.finish()
	if new_map == "–ù–∞–∑–∞–¥":
		await state.finish()
		await commands_start(message)
	if new_map != user_map:
		if new_map in ("–ú–æ—Å–∫–≤–∞","–ü–∏—Ç–µ—Ä","–°–æ—á–∏"):
			await state.finish()
			db.set_user_data(message.from_user.id,'can_map',f'{new_map}')
			await bot.send_message(message.from_user.id,f"–¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –≥–æ—Ä–æ–¥ {new_map}!")
			await commands_start(message)
	elif new_map == user_map:
		await bot.send_message(message.from_user.id,"–í—ã –∏ —Ç–∞–∫ –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∏–ª–∏ –≤—ã–π–¥–∏—Ç–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
	else:
		await bot.send_message(message.from_user.id,"–ü–æ–ª—å–∑—É–π—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π!")

class get_gold(StatesGroup):
	need_get_gold = State()

class balance(StatesGroup):
	need_balance = State()

class balance_gold(StatesGroup):
	need_balance = State()



#@dp.message_handler(commands=['–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å üí≥']) 
async def up_balance(message : types.Message):
	await bot.send_message(message.from_user.id,'üí≥ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö\n1üíé= 1 —Ä—É–±–ª—å ',reply_markup=kb_client_main_menu)
	await balance.need_balance.set()


async def balance_uper_pick (message:types.Message, state: FSMContext):
	if message.text!="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è":
		if message.chat.type == 'private':
			if is_number(message.text) and int(message.text)>=10:
				await state.finish()
				kb = InlineKeyboardMarkup()\
				.add(InlineKeyboardButton(text = "–ü–æ–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ QIWI",callback_data = f"balance_uper_ {(message.text)}"))\
				#.add(InlineKeyboardButton(text = "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º",callback_data = "another_way_pay_"))

				await bot.send_message(message.from_user.id,f'–í—ã —Ö–æ—Ç–∏—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ {message.text} —Ä—É–±.\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:',reply_markup = kb)
			
			elif int(message.text)<10:
				await bot.send_message(message.from_user.id,"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ 10 —Ä—É–±.")
			else:
				await bot.send_message(message.from_user.id,"–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")			
			
	else:
		await state.finish()
		await main_menu()
		await bot.send_message(message.from_user.id,'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è')	

async def another_way_pay (callback:types.CallbackQuery):
	await callback.message.delete()
	await bot.send_message(callback.from_user.id,"–£–∫—Ä–∞–∏–Ω–∞:\nMonoBank: 4035200042169406\n\n–†–æ—Å—Å–∏—è:\n–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª –∫–∏–≤–∏: +7 999 901-02-12\nQIWI: +7 999 901-02-12\n–¢–∏–Ω—å–∫–æ—Ñ—Ñ - 5536914160597518")
	await bot.send_message(callback.from_user.id,"–ì–õ–ê–í–ù–û–ï –ò–ú–ï–¢–¨ –ß–ï–ö, –ß–¢–û–ë–´ –ú–´ –ú–û–ì–õ–ò –£–ë–ï–î–ò–¢–¨–°–Ø –ß–¢–û –≠–¢–û –í–´ –û–¢–ü–†–ê–í–ò–õ–ò –ù–ê–ú –î–ï–ù–¨–ì–ò.",reply_markup = InlineKeyboardMarkup().add(InlineKeyboardButton(text = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫", callback_data = "send_chek_another_way_")))

class another_way(StatesGroup):
	chek_way = State() 

async def send_chek_another_way (callback:types.CallbackQuery):
	await callback.message.delete()
	await another_way.chek_way.set()
	await bot.send_message(callback.from_user.id,"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ–∫–∞ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")

async def take_chek_another_way (message:types.Message, state = FSMContext):
	if message.content_type =='photo':
		await state.finish()
		kb = InlineKeyboardMarkup().add(\
			InlineKeyboardButton(text = "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",callback_data = f'give_chek_gold_ {message.from_user.id}'),InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å —ç—Ç—É –∑–∞—è–≤–∫—É",callback_data = f"otklon_chek_gold_ {message.from_user.id}"))
		
		await bot.send_photo(admin_chat_id,message.photo[0].file_id,f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id:{message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —á–µ–∫',reply_markup = kb)
		await bot.send_message(message.from_user.id,'–°–ø–∞—Å–∏–±–æ, –æ–∂–∏–¥–∞–π—Ç–µ! –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —á–µ–∫–∞. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 24 —á–∞—Å–æ–≤.')
	else:
		if message.text != "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è":
			await bot.send_message(message.from_user.id,'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –∏–ª–∏ –≤—ã–π–¥–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
		else:
			await state.finish()
			await bot.send_message(message.from_user.id,'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è',reply_markup=kb_client)
class give_gold_check(StatesGroup):
	cnt_gold = State() 
async def give_chek_gold (callback:types.CallbackQuery):
	global id_gold_give_chek
	id_gold_give_chek = callback['data'].replace('give_chek_gold_ ','')
	await bot.send_message(admin_chat_id,f"–°–∫–æ–ª—å–∫–æ —Ä. –Ω–∞—á–∏—Å–ª–∏—Ç—å id:{id_gold_give_chek}?")
	await give_gold_check.cnt_gold.set()

async def cnt_give_chek_gold (message:types.Message, state=FSMContext):
	global id_gold_give_chek
	if (str(message.text)).lower() != ("–æ—Ç–º–µ–Ω–∞"): 
		if is_number(message.text):
			await state.finish()
			user_money = db.user_money(id_gold_give_chek)
			db.set_money(id_gold_give_chek,user_money+int(message.text))
			await bot.send_message(admin_chat_id,f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å id:{id_gold_give_chek} –±—ã–ª–æ –∑–∞—á–∏—Å–ª–µ–Ω–æ {message.text} —Ä.")
			await bot.send_message(id_gold_give_chek,f'–í–∞—à —á–µ–∫ –ø—Ä–æ–≤–µ—Ä–µ–ª–∏ –∏ –∑–∞—á–∏—Å–ª–∏–ª–∏ –Ω–∞ –≤–∞—à —Å—á–µ—Ç {message.text} —Ä.')
		else:
			await bot.send_message(admin_chat_id,'–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')
	else:
		await state.finish()
		await bot.send_message(admin_chat_id,"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

async def otklon_chek_gold (callback:types.CallbackQuery):
	await callback.message.delete()
	id_gold_del_chek = callback['data'].replace('otklon_chek_gold_ ','')
	await bot.send_message(admin_chat_id,f"–ó–∞—è–≤–∫–∞ –æ—Ç id:{id_gold_del_chek} –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫—ã—Ç–∞")

	await bot.send_message(id_gold_del_chek,"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ —á–µ–∫—É –∑–∞–∫—Ä—ã—Ç–∞\n–ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É")








async def balance_uper(message: types.CallbackQuery,):
	callback = message
	messagetext = callback['data'].replace('balance_uper_ ','')
	await callback.message.delete()

	global message_money
	message_money = int(messagetext)
	comment = str(message.from_user.id)+"_"+str(random.randint(1000,9999))
	bill = p2p.bill(amount = message_money,lifetime=15,comment=comment)


	db.add_check(message.from_user.id,message_money,bill.bill_id)

	await bot.send_message(message.from_user.id,f"–í–∞–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {message_money} —Ä—É–±. –Ω–∞ –Ω–∞—à —Å—á–µ—Ç –∫–∏–≤–∏\n–°—Å—ã–ª–∫—É: {bill.pay_url}\n–£–∫–∞–∑–∞–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ–ø–ª–∞—Ç–µ: {comment}",reply_markup=buy_menu(url=bill.pay_url,bill=bill.bill_id))




#@dp.message_handler(commands=['–ü–æ–ø–æ–ª–Ω–∏—Ç—å ü•á])–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≥–æ–ª–¥—ã
async def up_my_gold(message : types.Message):
	await bot.send_message(message.from_user.id,'ü•á –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è',reply_markup=kb_client_main_menu)
	await balance_gold.need_balance.set()


async def gold_uper(message: types.Message, state: FSMContext):
	if message.text!="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è":
		if message.chat.type == 'private':
			if is_number(message.text):
				if int(message.text)>=10:
					cur_money = db.user_money(message.from_user.id)
					need_gold = round(int(message.text)/100*70)
					global total_gold
					total_gold=message.text

					if cur_money < need_gold:
						
						await bot.send_message(message.from_user.id,f"–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ {message.text} –∑–æ–ª–æ—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {need_gold} —Ä—É–±.\n–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.")
					else:
						await bot.send_message(message.from_user.id,f'–° –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ{need_gold} —Ä—É–±. –∑–∞ {message.text} –∑–æ–ª–æ—Ç–∞.',reply_markup=InlineKeyboardMarkup(row_width=2).add(InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',callback_data = "buy_need_gold_")))
						await state.finish()

				else:

					await bot.send_message(message.from_user.id,"–ú–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –º–∏–Ω–∏–º—É–º 10 –∑–æ–ª–æ—Ç–∞")
			else:
				await bot.send_message(message.from_user.id,"–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")
			
	else:
		await state.finish()
		await bot.send_message(message.from_user.id,'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è',reply_markup=kb_client)

async def buy_need_gold(message:types.CallbackQuery):
	global total_gold
	callback = message
	cur_money = db.user_money(message.from_user.id)
	need_gold = round(int(total_gold)/100*70)
	user_gold = db.user_gold(message.from_user.id)
	all_time_gold = db.user_gold_all_time(message.from_user.id)
	db.set_money(message.from_user.id, cur_money-need_gold)
	db.set_gold(message.from_user.id, user_gold+int(total_gold))
	db.set_gold_all_time(message.from_user.id,all_time_gold +int(total_gold))
	await callback.message.delete()
	await bot.send_message(message.from_user.id,f"–í—ã –∫—É–ø–∏–ª–∏ {total_gold} –∑–æ–ª–æ—Ç–∞ –∑–∞ {need_gold} —Ä—É–±.")
	if db.user_top_week_exists(message.from_user.id)==False:
		db.add_top_week(message.from_user.id)
		db.set_gold_top_week(message.from_user.id,int(total_gold))

	elif db.user_top_week_exists(message.from_user.id):
		top_week_gold = db.user_gold_top_week(message.from_user.id)
		db.set_gold_top_week(message.from_user.id,top_week_gold+int(total_gold))

	if db.user_top_month_exists(message.from_user.id)==False:
		db.add_top_month(message.from_user.id)
		db.set_gold_top_month(message.from_user.id,int(total_gold))

	elif db.user_top_month_exists(message.from_user.id):
		top_month_gold = db.user_gold_top_week(message.from_user.id)
		db.set_gold_top_month(message.from_user.id,top_month_gold+int(total_gold))




#@dp.message_handler(commands=['–í—ã–≤–æ–¥ ü•á])–≤—ã–≤–æ–¥ –≥–æ–ª–¥—ã
async def get_my_gold(message : types.Message):
	await bot.send_message(message.from_user.id,'ü•á –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞',reply_markup=kb_client_main_menu)
	await get_gold.need_get_gold.set()

async def gold_geter(message: types.Message, state: FSMContext):
	if message.text!="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è":
		if message.chat.type == 'private':
			if is_number(message.text):
				if int(message.text)>=50:
					cur_gold = db.user_gold(message.from_user.id)
					#need_gold = round(int(message.text)/100*70)
					if cur_gold < int(message.text):
						await bot.send_message(message.from_user.id,"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞")
					else:
						async with state.proxy() as data:
							data['need_get_gold'] = message.text
						global gold_need_to_get
						gold_need_to_get = int(message.text)

						#user_gold = db.user_gold(message.from_user.id)
						#db.set_gold(message.from_user.id, user_gold-int(message.text))
						#await bot.send_message(message.from_user.id,f"–í—ã –≤—ã–≤–µ–ª–∏ {message.text} –∑–æ–ª–æ—Ç–∞")
						await state.finish()
						await ways_gold_get_start(message)
				else:

					await bot.send_message(message.from_user.id,"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ 50 –∑–æ–ª–æ—Ç–∞")
			else:
				await bot.send_message(message.from_user.id,"–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")			
	else:
		await state.finish()
		await bot.send_message(message.from_user.id,'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è',reply_markup=kb_client)
########–æ—á–µ—Ä–µ–¥—å
async def show_my_turn(message:types.Message):
	if db.user_turn_exists(message.from_user.id):
		data = db.user_turn_data(message.from_user.id)
		await bot.send_message(message.from_user.id,f'–í–∞—à–∞ –æ—á–µ—Ä–µ–¥—å:\n{data[2]}G - ‚Ññ{data[0]}')
	else:
		await bot.send_message(message.from_user.id,'–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ –≤—ã–≤–æ–¥!')
######################################–ú–ï–ù–Æ –í–´–í–û–î –ì–û–õ–î–´#####################################################
async def ways_gold_get_start (message:types.Message):
	await bot.send_message(message.from_user.id,"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞:",reply_markup = InlineKeyboardMarkup()\
		.add(InlineKeyboardButton(text = "–û—Ä—É–∂–∏–µ",callback_data = "guns_gold_geter_"))\
		.add(InlineKeyboardButton(text = "–ù–∞–∫–ª–µ–π–∫–∏",callback_data = "stikers_gold_geter_"))\
		.add(InlineKeyboardButton(text = '–ë—Ä–µ–ª–∫–∏',callback_data = 'trinket_gold_geter_')))	


async def guns_gold_geter (callback:types.CallbackQuery):
	await callback.message.delete()
	await bot.send_message(callback.from_user.id,"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ—Ä—É–∂–∏—è:",reply_markup = InlineKeyboardMarkup()\
		.add(InlineKeyboardButton(text = "Regular",callback_data = "regular_guns_gold_geter_"))\
		.add(InlineKeyboardButton(text = "StatTrack",callback_data = "stattrack_guns_gold_geter_"))\
		.add(InlineKeyboardButton(text = '–ù–∞–∑–∞–¥',callback_data = 'back_ways_gold_get_start_')))	


async def stikers_gold_geter (callback:types.CallbackQuery):
	await callback.message.delete()	
	await bot.send_message(callback.from_user.id,"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞–∫–ª–µ–µ–∫:",reply_markup = InlineKeyboardMarkup()\
		.add(InlineKeyboardButton(text = "Arcane",callback_data = "arcane_stikers_gold_geter_"))\
		.add(InlineKeyboardButton(text = "Legendary",callback_data = "legendary_stikers_gold_geter_"))\
		.add(InlineKeyboardButton(text = "Epic",callback_data = 'epic_stikers_gold_geter_'))\
		.add(InlineKeyboardButton(text = "Rare", callback_data = 'rare_stikers_gold_geter_'))\
		.add(InlineKeyboardButton(text = "–ù–∞–∑–∞–¥",callback_data = 'back_ways_gold_get_start_')))

async def trinket_gold_geter (callback:types.CallbackQuery):
	await callback.message.delete()
	await bot.send_message(callback.from_user.id,"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞–∫–ª–µ–µ–∫:",reply_markup = InlineKeyboardMarkup()\
		.add(InlineKeyboardButton(text = "Arcane",callback_data = "arcane_trinket_gold_geter_"))\
		.add(InlineKeyboardButton(text = "Legendary",callback_data = "legendary_trinket_gold_geter_"))\
		.add(InlineKeyboardButton(text = "Epic",callback_data = 'epic_trinket_gold_geter_'))\
		.add(InlineKeyboardButton(text = "Rare", callback_data = 'rare_trinket_gold_geter_'))\
		.add(InlineKeyboardButton(text = "–ù–∞–∑–∞–¥",callback_data = 'back_ways_gold_get_start_')))

async def back_ways_gold_get_start (callback:types.CallbackQuery):
	await callback.message.delete()
	await ways_gold_get_start(callback) 	
#########################################–í–ò–î–´ –û–†–£–ñ–ò–ô########################################################################
async def regular_guns_gold_geter (callback:types.CallbackQuery):
	await callback.message.delete()
	await bot.send_message(callback.from_user.id,"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ä—É–∂–∏—è:",reply_markup = InlineKeyboardMarkup()\
		.add(InlineKeyboardButton(text = "Arcane",callback_data = "arcane_regular_guns_gold_geter_"))\
		.add(InlineKeyboardButton(text = "Legendary",callback_data = "legendary_regular_guns_gold_geter_"))\
		.add(InlineKeyboardButton(text = "Epic",callback_data = 'epic_regular_guns_gold_geter_'))\
		.add(InlineKeyboardButton(text = "Rare", callback_data = 'rare_regular_guns_gold_geter_'))\
		.add(InlineKeyboardButton(text = "–ù–∞–∑–∞–¥",callback_data = 'back_guns_gold_geter_')))

async def stattrack_guns_gold_geter (callback:types.CallbackQuery):
	await callback.message.delete()
	await bot.send_message(callback.from_user.id,"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ä—É–∂–∏—è:",reply_markup = InlineKeyboardMarkup()\
		.add(InlineKeyboardButton(text = "Arcane",callback_data = "arcane_stattrack_guns_gold_geter_"))\
		.add(InlineKeyboardButton(text = "Legendary",callback_data = "legendary_stattrack_guns_gold_geter_"))\
		.add(InlineKeyboardButton(text = "Epic",callback_data = 'epic_stattrack_guns_gold_geter_'))\
		.add(InlineKeyboardButton(text = "Rare", callback_data = 'rare_stattrack_guns_gold_geter_'))\
		.add(InlineKeyboardButton(text = "–ù–∞–∑–∞–¥",callback_data = 'back_guns_gold_geter_')))

async def back_guns_gold_geter (callback:types.CallbackQuery):
	#await callback.message.delete()
	await guns_gold_geter(callback) 	
##############################################ALL GUNS#########################################################################
async def arcane_regular_guns_gold_geter (callback:types.CallbackQuery):
	await callback.message.delete()
	await bot.send_message(callback.from_user.id,"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞:",reply_markup = InlineKeyboardMarkup()\
		.add(InlineKeyboardButton(text = "F/S 'Venom'",callback_data = "Gold_geter_pick F/S 'Venom'"),InlineKeyboardButton(text = "UMP45 'Beast'",callback_data ="Gold_geter_pick UMP45 'Beast'" ))\
		.add(InlineKeyboardButton(text = "P350 'Forest Spirit'",callback_data = "Gold_geter_pick P350 'Forest Spirit'"),InlineKeyboardButton(text = "P90 'Samurai'",callback_data = "Gold_geter_pick P90 'Samurai'"))\
		.add(InlineKeyboardButton(text = "–ù–∞–∑–∞–¥",callback_data = 'back_to_regular_guns_gold_geter_')))

async def legendary_regular_guns_gold_geter (callback:types.CallbackQuery):
	await callback.message.delete()	
	await bot.send_message(callback.from_user.id,"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞:",reply_markup = InlineKeyboardMarkup()\
		.add(InlineKeyboardButton(text = "UMP45 'Winged'",callback_data = "Gold_geter_pick UMP45 'Winged'"),InlineKeyboardButton(text = "MP7 'Arcade'",callback_data ="Gold_geter_pick MP7 'Arcade'" ))\
		.add(InlineKeyboardButton(text = "MP7 'Lich'",callback_data = "Gold_geter_pick MP7 'Lich'"),InlineKeyboardButton(text = "TEC-9 'Fable'",callback_data = "Gold_geter_pick TEC-9 'Fable'"))\
		.add(InlineKeyboardButton(text = "M4 'Lizard'",callback_data = "Gold_geter_pick M4'Lizard'"),InlineKeyboardButton(text = "SM1014 'Necromancer'",callback_data = "Gold_geter_pick SM1014 'Necromancer'"))\
		.add(InlineKeyboardButton(text = "G22 'Frost Wyrm'",callback_data = "Gold_geter_pick G22 'Frost Wyrm'"),InlineKeyboardButton(text = "TEC-9 'Fable'",callback_data = "Gold_geter_pick TEC-9'Fable'"))\
		.add(InlineKeyboardButton(text = "M4 'Night Wolf'",callback_data = "Gold_geter_pick M4 'Night Wolf'"),InlineKeyboardButton(text = "AWM 'Dragon'",callback_data = "Gold_geter_pick AWM 'Dragon'"))\
		.add(InlineKeyboardButton(text = "USP 'Chameleon'",callback_data = "Gold_geter_pick USP 'Chameleon'"),InlineKeyboardButton(text = "M60 'Crunge'",callback_data = "Gold_geter_pick M60 'Crunge'"))\
		.add(InlineKeyboardButton(text = "Desers Eagle 'Orochi'",callback_data = "Gold_geter_pick Desers Eagle 'Orochi'"),InlineKeyboardButton(text = "M4 'Revival'",callback_data = "Gold_geter_pick M4 'Revival'"))\
		.add(InlineKeyboardButton(text = "AKR12 '4 Years'",callback_data = "Gold_geter_pick AKR12 '4 Years'"),InlineKeyboardButton(text = "F/S 'Rush'",callback_data = "Gold_geter_pick F/S 'Rush'"))
		.add(InlineKeyboardButton(text = "–ù–∞–∑–∞–¥",callback_data = 'back_to_regular_guns_gold_geter_')))

async def epic_regular_guns_gold_geter (callback:types.CallbackQuery):
	await callback.message.delete()
	await bot.send_message(callback.from_user.id,"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞:",reply_markup = InlineKeyboardMarkup()\
		.add(InlineKeyboardButton(text = "P350 '4 Years'",callback_data = "Gold_geter_pick P350 '4 Years'"),InlineKeyboardButton(text = "UMP45 'White Carbone'",callback_data ="Gold_geter_pick UMP45 'White Carbone'" ))\
		.add(InlineKeyboardButton(text = "UMP45 'Gas'",callback_data = "Gold_geter_pick UMP45 'Gas'"),InlineKeyboardButton(text = "P90 'Iron Will'",callback_data = "Gold_geter_pick P90 'Iron Will'"))\
		.add(InlineKeyboardButton(text = "P350 'Neon'",callback_data = "Gold_geter_pick P350 'Neon'"),InlineKeyboardButton(text = "UMP45 'Cyberpunk'",callback_data = "Gold_geter_pick UMP45 'Cyberpunk'"))\
		.add(InlineKeyboardButton(text = "P90 'Ghoul'",callback_data = "Gold_geter_pick P90 'Ghoul'"),InlineKeyboardButton(text = "MP5 'Reactor'",callback_data = "Gold_geter_pick MP5 'Reactor'"))\
		.add(InlineKeyboardButton(text = "MP7 '2 Years'",callback_data = "Gold_geter_pick MP7 '2 Years'"),InlineKeyboardButton(text = "M4 'Predator'",callback_data = "Gold_geter_pick M4 'Predator'"))\
		.add(InlineKeyboardButton(text = "G22 'Monster'",callback_data = "Gold_geter_pick G22 'Monster'"),InlineKeyboardButton(text = "M40 'Winter Track'",callback_data = "Gold_geter_pick M40 'Winter Track'"))\
		.add(InlineKeyboardButton(text = "USP 'Stone Cold'",callback_data = "Gold_geter_pick USP 'Stone Cold'"),InlineKeyboardButton(text = "–ù–∞–∑–∞–¥",callback_data = "back_to_regular_guns_gold_geter_")))

async def rare_regular_guns_gold_geter (callback:types.CallbackQuery):
	await callback.message.delete()
	await bot.send_message(callback.from_user.id,"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞:",reply_markup = InlineKeyboardMarkup()\
		.add(InlineKeyboardButton(text = "F/S 'Zone'",callback_data = "Gold_geter_pick F/S 'Zone'"),InlineKeyboardButton(text = "MP5 'Northern Fury'",callback_data ="Gold_geter_pick MP5 'Northern Fury'" ))\
		.add(InlineKeyboardButton(text = "SM1014 'Arctic'",callback_data = "Gold_geter_pick SM1014 'Arctic'"),InlineKeyboardButton(text = "TEC-9 'Reactor'",callback_data = "Gold_geter_pick TEC-9 'Reactor'"))\
		.add(InlineKeyboardButton(text = "MP5 '4 Years'",callback_data = "Gold_geter_pick MP5 '4 Years'"),InlineKeyboardButton(text = "AWM 'Polar Night'",callback_data = "Gold_geter_pick AWM 'Polar Night'"))\
		.add(InlineKeyboardButton(text = "G22 'White Carbone'",callback_data = "Gold_geter_pick G22 'White Carbone'"),InlineKeyboardButton(text = "MP5 'Project Z9'",callback_data = "Gold_geter_pick MP5 'Project Z9'"))\
		.add(InlineKeyboardButton(text = "M40 'Acrtic'",callback_data = "Gold_geter_pick M40 'Acrtic'"),InlineKeyboardButton(text = "MP7 'Winter Sport'",callback_data = "Gold_geter_pick MP7 'Winter Sport'"))\
		.add(InlineKeyboardButton(text = "Desert Eagle 'Morgan'",callback_data = "Gold_geter_pick Desert Eagle 'Morgan'"),InlineKeyboardButton(text = "USP '2 Years'",callback_data = "Gold_geter_pick USP '2 Years'"))\
		.add(InlineKeyboardButton(text = "–ù–∞–∑–∞–¥",callback_data = "back_to_regular_guns_gold_geter_")))

async def back_to_regular_guns_gold_geter (callback = types.CallbackQuery):
	await regular_guns_gold_geter(callback)
########stattrack guns###
async def cant_found_items (callback:types.CallbackQuery):
	await callback.message.delete()
	await bot.send_message(callback.from_user.id,"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–µ–¥–º–µ—Ç—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")


async def arcane_stattrack_guns_gold_geter (callback:types.CallbackQuery):
	await callback.message.delete()
	await bot.send_message(callback.from_user.id,"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–µ–¥–º–µ—Ç—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")#reply_markup = InlineKeyboardMarkup()\
		#.add(InlineKeyboardButton(text = "F/S 'Venom'",callback_data = "Gold_geter_pick F/S 'Venom'"),InlineKeyboardButton(text = "UMP45 'Beast'",callback_data ="Gold_geter_pick UMP45 'Beast'" ))\
		#.add(InlineKeyboardButton(text = "P350 'Forest Spirit'",callback_data = "Gold_geter_pick P350 'Forest Spirit'"),InlineKeyboardButton(text = "P90 'Samurai'",callback_data = "Gold_geter_pick P90 'Samurai'"))\
		#.add(InlineKeyboardButton(text = "–ù–∞–∑–∞–¥",callback_data = 'back_to_regular_guns_gold_geter_')))

async def epic_stattrack_guns_gold_geter (callback:types.CallbackQuery):
	await callback.message.delete()
	await bot.send_message(callback.from_user.id,"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞:",reply_markup = InlineKeyboardMarkup()\
		.add(InlineKeyboardButton(text = "FAMAS 'Beagle'",callback_data = "Gold_geter_pick FAMAS 'Beagle'"),InlineKeyboardButton(text = "M40 'Stream Beast'",callback_data ="Gold_geter_pick M40 'Stream Beast'" ))\
		.add(InlineKeyboardButton(text = "UMP45 'Cerberus'",callback_data = "Gold_geter_pick UMP45 'Cerberus'"),InlineKeyboardButton(text = "UMP45 'Spirit'",callback_data = "Gold_geter_pick UMP45 'Spirit'"))\
		.add(InlineKeyboardButton(text = "MP7 'Place'",callback_data = "Gold_geter_pick MP7 'Place'"),InlineKeyboardButton(text = "FAMAS 'Anger'",callback_data = "Gold_geter_pick FAMAS 'Anger'"))\
		.add(InlineKeyboardButton(text = "USP 'Pisces'",callback_data = "Gold_geter_pick USP 'Pisces'"),InlineKeyboardButton(text = "FN FAL 'Tactical'",callback_data = "Gold_geter_pick FN FAL 'Tactical'"))\
		.add(InlineKeyboardButton(text = "F/S 'Wraith'",callback_data = "Gold_geter_pick F/S 'Wraith'"),InlineKeyboardButton(text = "ARK12 'Carbone'",callback_data = "Gold_geter_pick ARK12 'Carbone'"))\
		.add(InlineKeyboardButton(text = "FabM 'Parrot'",callback_data = "Gold_geter_pick Desert FabM 'Parrot'"),InlineKeyboardButton(text = "M4 'Grand Prix'",callback_data = "Gold_geter_pick M4 'Grand Prix'"))\
		.add(InlineKeyboardButton(text = "M40 'Quake'",callback_data = "Gold_geter_pick M40 'Quake'"),InlineKeyboardButton(text = "MP7 'Offroad'",callback_data = "Gold_geter_pick MP7 'Offroad'"))\
		.add(InlineKeyboardButton(text = "Desert Eagle 'Dragon\nGlass'",callback_data = "Gold_geter_pick Desert Eagle 'Dragon Glass'"),InlineKeyboardButton(text = "M60'Y-20 R.A.I.J.I.N'",callback_data = "Gold_geter_pick M60'Y-20 R.A.I.J.I.N'"))\
		.add(InlineKeyboardButton(text = "P90 'Z-50 F.U.J.I.N'",callback_data = "Gold_geter_pick P90 'Z-50 F.U.J.I.N'"),InlineKeyboardButton(text = "M4 'R.O.N.I.N. mk56'",callback_data = "Gold_geter_pick M4 'R.O.N.I.N. mk56'"))\
		.add(InlineKeyboardButton(text = "–ù–∞–∑–∞–¥",callback_data = "back_to_regular_guns_gold_geter_")))

async def rare_stattrack_guns_gold_geter (callback:types.CallbackQuery):
	await callback.message.delete()
	await bot.send_message(callback.from_user.id,"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞:",reply_markup = InlineKeyboardMarkup()\
		.add(InlineKeyboardButton(text = "FabM 'Reactor'",callback_data = "Gold_geter_pick FabM 'Reactor'"),InlineKeyboardButton(text = "AKR12 'Flow'",callback_data ="Gold_geter_pick AKR12 'Flow'" ))\
		.add(InlineKeyboardButton(text = "F/S 'Zone'",callback_data = "Gold_geter_pick F/S 'Zone'"),InlineKeyboardButton(text = "MP5 'Northern Fury'",callback_data = "Gold_geter_pick MP5 'Northern Fury'"))\
		.add(InlineKeyboardButton(text = "SM1014 'Acrtic'",callback_data = "Gold_geter_pick SM1014 'Acrtic'"),InlineKeyboardButton(text = "TEC-9 'Reactor'",callback_data = "Gold_geter_pick TEC-9 'Reactor'"))\
		.add(InlineKeyboardButton(text = "MP5 'Project Z9'",callback_data = "Gold_geter_pick MP5 'Project Z9'"),InlineKeyboardButton(text = "M40 'Arctic'",callback_data = "Gold_geter_pick M40 'Arctic'"))\
		.add(InlineKeyboardButton(text = "MP7 'Winter Sport'",callback_data = "Gold_geter_pick MP7 'Winter Sport'"),InlineKeyboardButton(text = "P350 'Rally'",callback_data = "Gold_geter_pick P350 'Rally'"))\
		.add(InlineKeyboardButton(text = "FAMAS 'Hull'",callback_data = "Gold_geter_pick FAMAS 'Hull'"),InlineKeyboardButton(text = "M110 'Transition'",callback_data = "Gold_geter_pick M110 'Transition'"))\
		.add(InlineKeyboardButton(text = "UMP45 'Shark'",callback_data = "Gold_geter_pick UMP45 'Shark'"),InlineKeyboardButton(text = "MP7 'Banana'",callback_data = "Gold_geter_pick MP7 'Banana'"))\
		.add(InlineKeyboardButton(text = "Desert Eagle 'Ace'",callback_data = "Gold_geter_pick Desert Eagle 'Ace'"),InlineKeyboardButton(text = "P350 'Oni'",callback_data = "Gold_geter_pick P350 'Oni'"))\
		.add(InlineKeyboardButton(text = "SM1014 'Wave'",callback_data = "Gold_geter_pick SM1014 'Wave'"),InlineKeyboardButton(text = "M40 'Beagle'",callback_data = "Gold_geter_pick M40 'Beagle'"))\
		.add(InlineKeyboardButton(text = "M4 'PRO'",callback_data = "Gold_geter_pick M4 'PRO'"),InlineKeyboardButton(text = "G22 'Carbone'",callback_data = "Gold_geter_pick G22 'Carbone'"))\
		.add(InlineKeyboardButton(text = "TEC-9 'Tropic'",callback_data = "Gold_geter_pick TEC-9 'Tropic'"),InlineKeyboardButton(text = "M4 'Demon'",callback_data = "Gold_geter_pick M4 'Demon'"))\
		.add(InlineKeyboardButton(text = "UMP45 'Geometric'",callback_data = "Gold_geter_pick UMP45 'Geometric'"),InlineKeyboardButton(text = "FabM 'Flight'",callback_data = "Gold_geter_pick FabM 'Flight'"))\
		.add(InlineKeyboardButton(text = "Desert Eagle 'Red\nDragon'",callback_data = "Gold_geter_pick Desert Eagle 'Red Dragon'"),InlineKeyboardButton(text = "P350 'Autumn'",callback_data = "Gold_geter_pick P350 'Autumn'"))\
		.add(InlineKeyboardButton(text = "AWM 'Scratch'",callback_data = "Gold_geter_pick AWM 'Scratch'"),InlineKeyboardButton(text = "AKR12 'Pixel\nCamouflage'",callback_data = "Gold_geter_pick AKR12 'Pixel Camouflage'"))\
		.add(InlineKeyboardButton(text = "SM1014 'Pathfinder'",callback_data = "Gold_geter_pick SM1014 'Pathfinder'"),InlineKeyboardButton(text = "M4A1 'Kitsune'",callback_data = "Gold_geter_pick M4A1 'Kitsune'"))\
		.add(InlineKeyboardButton(text = "Desert Eagle 'Predator'",callback_data = "Gold_geter_pick Desert Eagle 'Predator'"),InlineKeyboardButton(text = "AWM 'Phoenix'",callback_data = "Gold_geter_pick AWM 'Phoenix'"))\
		.add(InlineKeyboardButton(text = "ARK 'Nano'",callback_data = "Gold_geter_pick ARK 'Nano'"),InlineKeyboardButton(text = "AKR 'Carbon'",callback_data = "Gold_geter_pick AKR 'Carbon'"))\
		.add(InlineKeyboardButton(text = "M110 'Z-07 M.A.R.K.S.M.A.N'",callback_data = "Gold_geter_pick M110 'Z-07 M.A.R.K.S.M.A.N'"),InlineKeyboardButton(text = "AKR12 'Armored'",callback_data = "Gold_geter_pick AKR12 'Armored'"))\
		.add(InlineKeyboardButton(text = "F/S 'Enforcer'",callback_data = "Gold_geter_pick F/S 'Enforcer'"),InlineKeyboardButton(text = "AKR12 'Transistor'",callback_data = "Gold_geter_pick AKR12 'Transistor'"))\
		.add(InlineKeyboardButton(text = "–ù–∞–∑–∞–¥",callback_data = "back_to_regular_guns_gold_geter_")))

async def back_to_stattrack_guns_gold_geter (callback = types.CallbackQuery):
	await stattrack_guns_gold_geter(callback)
##########STIKERS PICK#####################################################

async def epic_stikers_gold_geter (callback:types.CallbackQuery):
	await callback.message.delete()
	await bot.send_message(callback.from_user.id,"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞:",reply_markup = InlineKeyboardMarkup()\
		.add(InlineKeyboardButton(text = "Sector B",callback_data = "Gold_geter_pick Sector B"),InlineKeyboardButton(text = "Brick",callback_data ="Gold_geter_pick Brick" ))\
		.add(InlineKeyboardButton(text = "Carpet",callback_data = "Gold_geter_pick Carpet"),InlineKeyboardButton(text = "4 Years Metallic",callback_data = "Gold_geter_pick 4 Years Metallic"))\
		.add(InlineKeyboardButton(text = "–ù–∞–∑–∞–¥",callback_data = "back_to_stikers_gold_geter_")))

async def rare_stikers_gold_geter (callback:types.CallbackQuery):
	await callback.message.delete()
	await bot.send_message(callback.from_user.id,"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞:",reply_markup = InlineKeyboardMarkup()\
		.add(InlineKeyboardButton(text = "DEagle Master",callback_data = "Gold_geter_pick DEagle Master"),InlineKeyboardButton(text = "Not Today",callback_data ="Gold_geter_pick Not Today" ))\
		.add(InlineKeyboardButton(text = "Lucky Start",callback_data = "Gold_geter_pick Lucky Start"),InlineKeyboardButton(text = "Pewnguin",callback_data = "Gold_geter_pick Pewnguin"))\
		.add(InlineKeyboardButton(text = "AWM Master",callback_data = "Gold_geter_pick AWM Master"),InlineKeyboardButton(text = "Spare Gold",callback_data = "Gold_geter_pick Spare Gold"))\
		.add(InlineKeyboardButton(text = "Headshot Zone",callback_data = "Gold_geter_pick Headshot Zone"),InlineKeyboardButton(text = "–ù–∞–∑–∞–¥",callback_data = "back_to_stikers_gold_geter_")))


async def back_to_stikers_gold_geter (callback:types.CallbackQuery):
	await stikers_gold_geter(callback)

###############
async def epic_trinket_gold_geter (callback:types.CallbackQuery):
	await callback.message.delete()
	await bot.send_message(callback.from_user.id,"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞:",reply_markup = InlineKeyboardMarkup()\
		.add(InlineKeyboardButton(text = "Santa Helper",callback_data = "Gold_geter_pick Santa Helper"),InlineKeyboardButton(text = "4 Years Silver",callback_data ="Gold_geter_pick 4 Years Silver" ))\
		.add(InlineKeyboardButton(text = "Phoenix",callback_data = "Gold_geter_pick Phoenix"),InlineKeyboardButton(text = "Gift Thief",callback_data = "Gold_geter_pick Gift Thief"))\
		.add(InlineKeyboardButton(text = "–ù–∞–∑–∞–¥",callback_data = "back_to_trinket_gold_geter_")))

async def rare_trinket_gold_geter (callback:types.CallbackQuery):
	await callback.message.delete()
	await bot.send_message(callback.from_user.id,"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞:",reply_markup = InlineKeyboardMarkup()\
		.add(InlineKeyboardButton(text = "Dummy",callback_data = "Gold_geter_pick Dummy"),InlineKeyboardButton(text = "Mr Bowler",callback_data ="Gold_geter_pick Mr Bowler" ))\
		.add(InlineKeyboardButton(text = "Baby Penguin",callback_data = "Gold_geter_pick Baby Penguin"),InlineKeyboardButton(text = "Gingerbread",callback_data = "Gold_geter_pick Gingerbread"))\
		.add(InlineKeyboardButton(text = "Gift Catcher",callback_data = "Gold_geter_pick Gift Catcher"),InlineKeyboardButton(text = "Daruma",callback_data = "Gold_geter_pick Daruma"))\
		.add(InlineKeyboardButton(text = "Imperial Coin",callback_data = "Gold_geter_pick Imperial Coin"),InlineKeyboardButton(text = "Kitsune",callback_data = "Gold_geter_pick Kitsune"))\
		.add(InlineKeyboardButton(text = "–ù–∞–∑–∞–¥",callback_data = "back_to_trinket_gold_geter_")))


async def back_to_trinket_gold_geter (callback:types.CallbackQuery):
	await trinket_gold_geter(callback)


class photo_gold_geter(StatesGroup):
	photo = State()
async def total_gold_geter(callback = types.CallbackQuery):
	if db.user_turn_exists(callback.from_user.id):
		await callback.message.delete()
		await bot.send_message(callback.from_user.id,'–í—ã —É–∂–µ —Å—Ç–æ–∏—Ç–µ –≤ –æ—á–µ—Ä–µ–¥–∏, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞—è–≤–∫—É')
	else:
		await callback.message.delete()
		global price_gold_geter
		price_gold_geter = gold_need_to_get+(((gold_need_to_get)/100)*25) +(random.randint(5,15)/100)
		y = (callback['data']).replace('Gold_geter_pick','')
		text = f"üåü–û—Ç–ª–∏—á–Ω–æ!\n\n–¢–µ–ø–µ—Ä—å –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–π—Ç–∏ –≤ Standoff 2 –∏ —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç, –≥–¥–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω {y} –Ω–∞ —Ä—ã–Ω–∫–µ –∑–∞ {price_gold_geter} G.\n\n‚ùó–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≥–∞–ª–æ—á–∫—É –Ω–∞ —Ä—ã–Ω–∫–µ:'–¢–æ–ª—å–∫–æ –º–æ–∏ –∑–∞–ø—Ä–æ—Å—ã'!\n\n–ö–æ–≥–¥–∞ –≤—Å–µ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ —ç—Ç–æ—Ç –¥–∏–∞–ª–æ–≥.\n–ü—Ä–∏–º–µ—Ä —Å–≤–µ—Ä—Ö—É ‚¨Ü"
		#await bot.send_message(admin_chat_id,y)
		await bot.send_photo(callback.from_user.id,'AgACAgIAAxkBAAIdyGLMgvk4wIHscrx4yVvIBj8kVm4JAAKwwDEbzKtoSgPhqjm1LhE-AQADAgADcwADKQQ',text)
		await photo_gold_geter.photo.set()

async def send_order_gold (message: types.Message, state: FSMContext):
	if message.content_type == 'photo':
		await state.finish()
		global price_gold_geter
		db.add_user_turn(message.from_user.id)
		db.set_user_turn(message.from_user.id,gold_need_to_get)
		cur_gold = db.user_gold(message.from_user.id)
		db.set_gold(message.from_user.id,int(cur_gold)-int(gold_need_to_get))
		id_turn = db.user_turn_data(message.from_user.id)[0]
		await bot.send_message(message.from_user.id,f'üí´ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ.\n\n‚è± –í—ã {id_turn} –≤ –æ—á–µ—Ä–µ–¥–∏')
		await bot.send_photo(admin_chat_id,message.photo[0].file_id,f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id:{message.from_user.id},–∑–∞–∫–∞–∑–∞–ª –≤—ã–≤–æ–¥ {gold_need_to_get} G\n–ï–º—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã–ª–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–Ω—É –≤ {price_gold_geter} G',reply_markup=\
			InlineKeyboardMarkup().add(InlineKeyboardButton(text = '–ó–æ–ª–æ—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω–æ',callback_data = f'finish_gold_geter {message.from_user.id,gold_need_to_get,id_turn}'),InlineKeyboardButton(text = '–í–µ—Ä–Ω—É—Ç—å –µ–º—É –∑–æ–ª–æ—Ç–æ',callback_data = f'money_back_gold_geter {message.from_user.id,gold_need_to_get,id_turn}')))
		db.set_gold_calls(message.from_user.id,1)
	else:
		if message.text != "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è":
			await bot.send_message(message.from_user.id,'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ –≤—ã–π–¥–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
		else:
			await state.finish()
			await bot.send_message(message.from_user.id,'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è',reply_markup=kb_client)

async def finish_gold_geter (callback:types.CallbackQuery):
	await callback.message.delete()
	x = callback['data']
	y = (callback['data'].replace('finish_gold_geter ','')).split(',')
	id_user = y[0]
	need_gold = y[1]
	id_turn = y [2]
	kb = InlineKeyboardMarkup().row(InlineKeyboardButton(text = '–î–∞',callback_data=f'Total_gold {x}'),InlineKeyboardButton(text = '–ù–µ—Ç,–≤–µ—Ä–Ω—É—Ç—å –µ–º—É –∑–æ–ª–æ—Ç–æ',callback_data = f'money_back_gold_geter {id_user,need_gold,id_turn}'))
	await bot.send_message(admin_chat_id,f'–í—ã —É–≤–µ—Ä–µ–Ω–Ω—ã —á—Ç–æ –ø–µ—Ä–µ–¥–∞–ª–∏ –∑–æ–ª–æ—Ç–æ, –∏ —Ö–æ—Ç–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É?\nid:{id_user}\n{need_gold}G',reply_markup = kb )


async def total_finish_gold_geter(callback:types.CallbackQuery):
	await callback.message.delete()
	data = ((((callback['data'].replace('finish_gold_geter ','')).replace('Total_gold ','')).replace('(','')).replace(')','')).split(',')
	#await bot.send_message(admin_chat_id,data)

	id_user = data[0]
	need_gold = data[1]
	id_turn = data [2]
	db.delete_user_turn(id_turn)
	await bot.send_message(admin_chat_id,f'–ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è id:{id_user} –Ω–∞ {need_gold}G –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞')
	await bot.send_message(id_user,'–í–∞–º –ø–µ—Ä–µ–¥–∞–ª–∏ –∑–æ–ª–æ—Ç–æ –∏ —Å–Ω—è–ª–∏ —Å –æ—á–µ—Ä–µ–¥–∏')
	db.set_gold_calls(id_user,0)


async def money_back_gold_geter (callback:types.CallbackQuery):
	await callback.message.delete()
	data = (((callback['data'].replace('money_back_gold_geter ','')).replace('(','')).replace(')','')).split(',')
	id_user = data[0]
	#id_user = int(id_user)
	need_gold = data[1]
	id_turn = data [2]
	user_gold = db.user_gold(id_user)
	db.set_gold(id_user,user_gold+int(user_gold))
	db.delete_user_turn(id_turn)
	await bot.send_message(admin_chat_id,f'–í—ã –≤–µ—Ä–Ω—É–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å id:{id_user}\n{need_gold} –∑–æ–ª–æ—Ç–∞')
	await bot.send_message(id_user,'–°—Ä–µ–¥—Å—Ç–≤–∞ –≤–µ—Ä–Ω—É–ª–∏—Å—å –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å')
	db.set_gold_calls(id_user,0)
































#–ò–≥—Ä—ã –Ω–∞ –∑–æ–ª–æ—Ç–æ
async def gold_games(message : types.Message):
	if db.about_user(message.from_user.id)[0][6] == "–°–æ—á–∏":
		await bot.send_message(message.from_user.id,'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ –∫–∞–∑–∏–Ω–æ, —Ç—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–Ω—è—Ç—å —Ü–µ–ª–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω—É –∏–ª–∏ –æ—Å—Ç–∞—Ç–∞—Ç—å—Å—è –±–µ–∑ —Ç—Ä—É—Å–æ–≤)\n–í—ã–±–µ—Ä–µ—Ç–µ –∏–≥—Ä—É üé≤:',reply_markup=InlineKeyboardMarkup(row_width=2).add(InlineKeyboardButton(text='–ë–∞—à–Ω—è',callback_data = "game_tawer_")).add(InlineKeyboardButton(text='JackPot',callback_data = "game_JackPot_text_")))
	else:
		await bot.send_message(message.from_user.id,"–≠—Ç–æ–≥–æ –Ω–µ—Ç –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ, –æ—Ç–∫—Ä–æ–π –∫–∞—Ä—Ç—É")
async def game_tawer(callback : types.CallbackQuery):
	if db.about_user(callback.from_user.id)[0][6] == "–°–æ—á–∏":
		await callback.message.delete()
		text = '–ë–∞—à–Ω—è - —ç—Ç–æ –∏–≥—Ä–∞, –≥–¥–µ –≤—ã –¥–µ–ª–∞–µ—Ç–µ —Å—Ç–∞–≤–∫—É –≤ –∑–æ–ª–æ—Ç–µ –∏ —É–≥–∞–¥—ã–≤–∞–µ—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞—à–Ω–∏, –ø–æ–¥–Ω–∏–º–∞—è—Å—å –≤—Å–µ –≤—ã—à–µ. –ß–µ–º –≤—ã—à–µ –≤—ã –ø–æ–¥–Ω–∏–º–∏—Ç–µ—Å—å, —Ç–µ–º –±–æ–ª—å—à–µ –Ω–∞–≥—Ä–∞–¥–∞. –ï—Å–ª–∏ –≤—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏, –∏–≥—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–∞ 3X.'
		await bot.send_message(callback.from_user.id,text,reply_markup=InlineKeyboardMarkup(row_width=2).add(InlineKeyboardButton(text='–ò–≥—Ä–∞—Ç—å',callback_data = "start_game_tawer_")).add(InlineKeyboardButton(text = "–ù–∞–∑–∞–¥", callback_data = "back_to_gold_game_")))
	else:
		await bot.send_message(callback.from_user.id,"–≠—Ç–æ–≥–æ –Ω–µ—Ç –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ, –æ—Ç–∫—Ä–æ–π –∫–∞—Ä—Ç—É")

class gold_to_tawer(StatesGroup):
	gold = State()
async def start_game_tawer(callback: types.CallbackQuery):
	if db.about_user(callback.from_user.id)[0][6] == "–°–æ—á–∏":
		await callback.message.delete()
		await gold_to_tawer.gold.set()
		await bot.send_message(callback.from_user.id,"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–Ω–∞ 10G")
		await bot.send_message(callback.from_user.id,"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:",reply_markup = kb_client_main_menu)
	else:
		await bot.send_message(message.from_user.id,"–≠—Ç–æ–≥–æ –Ω–µ—Ç –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ, –æ—Ç–∫—Ä–æ–π –∫–∞—Ä—Ç—É")

async def count_gold_to_tawer(message: types.Message, state: FSMContext):
	if db.about_user(message.from_user.id)[0][6] == "–°–æ—á–∏":
		user_gold = db.user_gold(message.from_user.id)
		if message.text == ('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è'):
			await state.finish()
			await bot.send_message(message.from_user.id,'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è',reply_markup=kb_client)
		elif message.text.isdigit()==False:
			await bot.send_message(message.from_user.id,"–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")
		elif int(int(message.text)**2)**0.5!=int(message.text):
			await bot.send_message(message.from_user.id,"–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")

		elif int(message.text)<10:
			await bot.send_message(message.from_user.id,"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ 10G")
		elif user_gold >= int(message.text):
			db.set_gold(message.from_user.id, user_gold-int(message.text))
			#–°–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É
			db.set_user_data(message.from_user.id,'stavka',int(message.text))
			await state.finish()

			await show_me_game_tawer(message)
	else:
		await bot.send_message(callback.from_user.id,"–≠—Ç–æ–≥–æ –Ω–µ—Ç –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ, –æ—Ç–∫—Ä–æ–π –∫–∞—Ä—Ç—É")



async def show_me_game_tawer(message: types.Message):
	if db.about_user(message.from_user.id)[0][6] == "–°–æ—á–∏":
		cnt_tower_way = db.about_user(message.from_user.id)[0][18]
		if cnt_tower_way in (0,None):
			db.set_user_data(message.from_user.id,'tawer_way',1)
			cnt_tower_way = 1

		if cnt_tower_way > 1:
			await bot.send_message(message.from_user.id,"–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–õ–µ–≤–æ' –∏–ª–∏ '–ü—Ä–∞–≤–æ'.\n–ê –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞, –∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–∑–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à'.",reply_markup = InlineKeyboardMarkup(row_width=2).row(InlineKeyboardButton(text='–õ–µ–≤–æ',callback_data = "tawer_go_"),InlineKeyboardButton(text='–ü—Ä–∞–≤–æ',callback_data = "tawer_go_")).add(InlineKeyboardButton(text='–ó–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à',callback_data = "tawer_take_my_money_")))
		else:
			db.set_user_data(message.from_user.id,'tawer_way',1)
			await bot.send_message(message.from_user.id,"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞—à–Ω–∏",reply_markup = InlineKeyboardMarkup(row_width=2).row(InlineKeyboardButton(text='–õ–µ–≤–æ',callback_data = "tawer_go_"),InlineKeyboardButton(text='–ü—Ä–∞–≤–æ',callback_data = "tawer_go_")))
	else:
		await bot.send_message(message.from_user.id,"–≠—Ç–æ–≥–æ –Ω–µ—Ç –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ, –æ—Ç–∫—Ä–æ–π –∫–∞—Ä—Ç—É")

async def tawer_go(callback: types.CallbackQuery):
	if db.about_user(callback.from_user.id)[0][6] == "–°–æ—á–∏":
		cnt_tower_way = db.about_user(callback.from_user.id)[0][18]
		gold_stavka = db.about_user(callback.from_user.id)[0][19]
		way = random.randint(0,1)
		if way == 0:
			await callback.message.delete()
			await bot.send_message(callback.from_user.id,"–£–ø—Å, –≤–∞–º –Ω–µ –ø–æ–≤–µ–∑–ª–æ ‚òπÔ∏è")
			db.set_user_data(callback.from_user.id,'tawer_way',0)
			db.set_user_data(callback.from_user.id,'stavka',0)
		elif way == 1 and cnt_tower_way == 1:
			await callback.message.delete()
			gold_stavka = int(gold_stavka*1.15)
			db.set_user_data(callback.from_user.id,'tawer_way',cnt_tower_way+1)
			db.set_user_data(callback.from_user.id,'stavka',gold_stavka)
			await bot.send_message(callback.from_user.id,f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {gold_stavka} –∑–æ–ª–æ—Ç–∞")
			await show_me_game_tawer(callback)


		elif way == 1 and cnt_tower_way == 2:
			await callback.message.delete()
			gold_stavka = int(gold_stavka*1.5)
			db.set_user_data(callback.from_user.id,'stavka',gold_stavka)
			db.set_user_data(callback.from_user.id,'tawer_way',cnt_tower_way+1)
			await bot.send_message(callback.from_user.id,f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {gold_stavka} –∑–æ–ª–æ—Ç–∞")
			await show_me_game_tawer(callback)	

		elif way == 1 and cnt_tower_way == 3:
			await callback.message.delete()
			gold_stavka = int(gold_stavka*1.75)
			db.set_user_data(callback.from_user.id,'stavka',gold_stavka)
			db.set_user_data(callback.from_user.id,'tawer_way',cnt_tower_way+1)
			await bot.send_message(callback.from_user.id,f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {gold_stavka} –∑–æ–ª–æ—Ç–∞")
			await show_me_game_tawer(callback)	

		elif (way == 1) and (cnt_tower_way == 4):
			await callback.message.delete()

			gold_stavka = int(gold_stavka*2)
			db.set_user_data(callback.from_user.id,'stavka',gold_stavka)
			db.set_user_data(callback.from_user.id,'tawer_way',cnt_tower_way+1)
			await bot.send_message(callback.from_user.id,f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {gold_stavka} –∑–æ–ª–æ—Ç–∞")	
			await show_me_game_tawer(callback)
		elif (way == 1) and (cnt_tower_way == 5):
			await callback.message.delete()
			gold_stavka = int(gold_stavka*2.5)
			db.set_user_data(callback.from_user.id,'stavka',gold_stavka)
			db.set_user_data(callback.from_user.id,'tawer_way',cnt_tower_way+1)
			await bot.send_message(callback.from_user.id,f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {gold_stavka} –∑–æ–ª–æ—Ç–∞")	
			await show_me_game_tawer(callback)
		elif (way == 1) and (cnt_tower_way == 6):
			await callback.message.delete()
			gold_stavka = int(gold_stavka*3)
			db.set_user_data(callback.from_user.id,'stavka',gold_stavka)
			db.set_user_data(callback.from_user.id,'tawer_way',cnt_tower_way+1)
			await bot.send_message(callback.from_user.id,f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {gold_stavka} –∑–æ–ª–æ—Ç–∞")	
			await show_me_game_tawer(callback)
	else:
		await bot.send_message(callback.from_user.id,"–≠—Ç–æ–≥–æ –Ω–µ—Ç –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ, –æ—Ç–∫—Ä–æ–π –∫–∞—Ä—Ç—É")


 #–ö–Ω–æ–ø–∫–∞ –∑–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à
async def tawer_take_my_money(callback: types.CallbackQuery):
	user_data = db.about_user(callback.from_user.id)[0]
	if user_data[6] == "–°–æ—á–∏":
		gold_stavka = db.about_user(callback.from_user.id)[0][19]
		await callback.message.delete()
		user_gold = db.user_gold(callback.from_user.id)
		db.set_gold(callback.from_user.id, user_gold+gold_stavka)

		db.set_user_data(callback.from_user.id,'stavka',0)
		db.set_user_data(callback.from_user.id,'tawer_way',0)
		await bot.send_message(callback.from_user.id,f'–¢—ã –∑–∞–±—Ä–∞–ª —Å —Å–æ–±–æ–π —Å–≤–æ–π –≤—ã–∏–≥—Ä—ã—à ({user_data[19]} –∑–æ–ª–æ—Ç–∞ü•á)!–ü—Ä–∏—Ö–æ–¥–∏ –µ—â–µ!')
		if user_data[23] == 5:
			await bot.send_message(callback.from_user.id,"–ú–æ–ª–æ–¥–µ—Ü, —Ç—ã –≤—ã–∏–≥—Ä–∞–ª –∏ –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ!\n–¢–≤–æ—è –Ω–∞–≥—Ä–∞–¥–∞\n1. 300 –∑–æ–ª–æ—Ç–∞ü•á\n2.–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –±–∏–∑–Ω–µ—Å—Å.–í—ã–π–¥–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —ç—Ç–æ")
			db.set_user_data(callback.from_user.id,'can_bussines',1)
			db.set_user_data(callback.from_user.id,'Level_task',6)
			
	else:
		await bot.send_message(callback.from_user.id,"–≠—Ç–æ–≥–æ –Ω–µ—Ç –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ, –æ—Ç–∫—Ä–æ–π –∫–∞—Ä—Ç—É")

class bet_gold(StatesGroup):
	my_bet = State()

def pick_winner(lst,win):
	lst = sorted(lst)
	winners = []
	if win in range(1,lst[0]):
		winners.append(lst[0])
	for i in range(1,len(lst)):
		if win in range(lst[i-1],lst[i]):
			winners.append(lst[i])
	return winners




async def game_JackPot_text(callback:types.CallbackQuery):
	if db.about_user(callback.from_user.id)[0][6] == "–°–æ—á–∏":
		await callback.message.delete()
		kb = InlineKeyboardMarkup(row_width=2)\
		.add(InlineKeyboardButton(text = '–ò–≥—Ä–∞—Ç—å',callback_data = "game_JackPot_"))\
		.add(InlineKeyboardButton(text = "–ù–∞–∑–∞–¥",callback_data = "back_to_gold_game_"))
		text = "–†–µ–∂–∏–º JackPot - –≠—Ç–æ –ø—Ä–µ–¥–µ–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ–π, –Ω–æ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ä–µ–∂–∏–º. –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≤–Ω–æ—Å—è—Ç –ª—é–±—É—é —Å—Ç–∞–≤–∫—É –∑–æ–ª–æ—Ç–æ–º –∏ –æ–±—Ä–∞–∑—É–µ—Ç—Å—è –æ–±—â–∏–π –±–∞–Ω–∫. –ö–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–π —à–∞–Ω—Å –Ω–∞ –≤—ã–∏–≥—Ä—ã—à, –∑–∞–≤–∏—Å—è—â–∏–π –æ—Ç –µ–≥–æ —Å—Ç–∞–≤–∫–∏. –ß–µ–º –±–æ–ª—å—à–µ —Å—Ç–∞–≤–∫–∞, —Ç–µ–º –±–æ–ª—å—à–µ —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å. –ù–æ –∏ —Å –º–∞–ª–µ–Ω—å–∫–∏–º —à–∞–Ω—Å–æ–º –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–∏–≥—Ä–∞—Ç—å –≤–µ—Å—å –±–∞–Ω–∫! –ú—ã –±–µ—Ä—ë–º 10% –∑–∞ –≤—ã–∏–≥—Ä—ã—à."
		await bot.send_message(callback.from_user.id,text,reply_markup = kb)
	else:
		await bot.send_message(callback.from_user.id,"–≠—Ç–æ–≥–æ –Ω–µ—Ç –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ, –æ—Ç–∫—Ä–æ–π –∫–∞—Ä—Ç—É")

async def game_JackPot(callback:types.CallbackQuery):
	if db.about_user(callback.from_user.id)[0][6] == "–°–æ—á–∏":
		kb_bet = InlineKeyboardMarkup(row_width=2)\
		.add(InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å',callback_data = "game_JackPot_"))\
		.add(InlineKeyboardButton(text='–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É',callback_data = "do_gold_bet_"))
		if db.bet_exists()==False:
			bank = 0
			await callback.message.delete()
			await bot.send_message(callback.from_user.id,f'–ë–∞–Ω–∫: {bank}G\n–í—Ä–µ–º—è: –û–∂–∏–¥–∞–µ–º —Å—Ç–∞–≤–∫–∏',reply_markup = kb_bet)
		else :
			stop_t = datetime.datetime.strptime(db.JackPot_time_stop(), '%Y-%m-%d %H:%M:%S.%f')
			data_time =datetime.datetime.now() 
			if stop_t < data_time:
				bets = db.all_bet()
				chanse_list = []
				bank = 0
				for bet in bets:
					bank += int(bet[2])
					chanse_list.append(bet[2])
				winner_random = random.randint(1,int(bank))
				real_winner = pick_winner(chanse_list,winner_random)
				real_winner = [x[1] for x in bets if x[2] in real_winner]
				total_winner = real_winner[random.randint(0,len(real_winner)-1)]
				db.JackPot_time_set()
				user_gold = db.user_gold(total_winner)
				db.set_gold(total_winner, user_gold+int(bank*0.9))
				await bot.send_message(total_winner,f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –≤—ã–∏–≥—Ä–∞–ª {int(bank*0.9)}G")
				await bot.send_message(callback.from_user.id,f'–ë–∞–Ω–∫: 0G\n–í—Ä–µ–º—è: –û–∂–∏–¥–∞–µ–º —Å—Ç–∞–≤–∫–∏',reply_markup = kb_bet)

			else:			
				bets = db.all_bet()
				bets_str = ''
				bank = 0
				for bet in bets:
					bank += int(bet[2])
					bets_str = bets_str + f'{bet[1]} - {bet[2]}G | {bet[3]}%\n'
				delta = str(stop_t - data_time).split('.')[0]
				await callback.message.delete()
				await bot.send_message(callback.from_user.id,f'–ë–∞–Ω–∫: {bank}G\n–í—Ä–µ–º—è: {delta}\n–ò–≥—Ä–æ–∫–∏:\n{bets_str}',reply_markup = kb_bet)
	else:
		await bot.send_message(callback.from_user.id,"–≠—Ç–æ–≥–æ –Ω–µ—Ç –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ, –æ—Ç–∫—Ä–æ–π –∫–∞—Ä—Ç—É")








async def do_gold_bet(callback:types.CallbackQuery):
	if db.about_user(callback.from_user.id)[0][6] == "–°–æ—á–∏":
		await callback.message.delete()
		await bot.send_message(callback.from_user.id,'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏')
		await bet_gold.my_bet.set()
	else:
		await bot.send_message(callback.from_user.id,"–≠—Ç–æ–≥–æ –Ω–µ—Ç –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ, –æ—Ç–∫—Ä–æ–π –∫–∞—Ä—Ç—É")

def set_all_bets():
	bets = db.all_bet()
	bank = 0
	for bet in bets:
			bank += int(bet[2])
	for bet in bets:
		cur_bet = bet[2]
		div_win = bank/100
		win_chanse = int(cur_bet/div_win)
		if cur_bet == bank:
			win_chanse == 100
		db.set_win_chanse(bet[1],win_chanse)

async def count_gold_bet(message: types.Message, state: FSMContext):
	if db.about_user(message.from_user.id)[0][6] == "–°–æ—á–∏":
		if is_number(message.text):
			user_gold = db.user_gold(message.from_user.id)
			if int(message.text)<=user_gold:
				if db.user_bet_exists(message.from_user.id):
					user_last_bet = db.user_gold_bet(message.from_user.id)
					db.set_gold(message.from_user.id, user_gold-(int(message.text)))
					db.set_gold_bet(message.from_user.id,user_last_bet+int(message.text))
					set_all_bets()
					await bot.send_message(message.from_user.id,f"–í—ã —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É –≤ –µ—â–µ {message.text}G")
					await state.finish()
				else:
					if db.bet_exists() == False:
						start_game = datetime.datetime.now()
						stop_game = start_game + datetime.timedelta(minutes = 10)
						db.JackPot_time_start_add(start_game)
						db.JackPot_time_stop_add(stop_game)
					db.set_gold(message.from_user.id, user_gold-(int(message.text)))
					db.add_user_bet(message.from_user.id)
					db.set_gold_bet(message.from_user.id,int(message.text))
					set_all_bets()
					await bot.send_message(message.from_user.id,f"–í—ã —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É –≤ {message.text}G")
					await state.finish()

			else:
				await bot.send_message(message.from_user.id,'–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')

		else:
			await bot.send_message(message.from_user.id,"–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–≤–µ —á–∏—Å–ª–æ")
	else:
		await bot.send_message(message.from_user.id,"–≠—Ç–æ–≥–æ –Ω–µ—Ç –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ, –æ—Ç–∫—Ä–æ–π –∫–∞—Ä—Ç—É")

async def back_to_gold_game (callback:types.CallbackQuery):
	await callback.message.delete()
	await gold_games(callback)


async def donat_menu(message:types.Message):
	user_data = db.about_user(message.from_user.id)[0]
	if user_data[3] != None:
		kb = ReplyKeyboardMarkup(resize_keyboard=True)\
		.row(KeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å üí≥"),KeyboardButton("–î–æ–Ω–∞—Ç –ú–∞–≥–∞–∑–∏–Ω üíé"))\
		.add(KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è"))
		string = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –¥–æ–Ω–∞—Ç,{user_data[1]}!–°–µ–π—á–∞—Å –Ω–∞ —Ç–≤–æ–µ–º —Å—á–µ—Ç—É {user_data[11]} üíé!"
		await bot.send_message(message.from_user.id,string,reply_markup = kb)
	else:
		await bot.send_message(message.from_user.id,"–≠—Ç–æ –µ—â–µ —Ç–µ–±–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ!")


#async def donat_menu(message:types.Message)





#@dp.message_handler(commands=['–ó–æ–ª–æ—Ç–æ ü•á'])
async def pizza_open_command(message : types.Message):
	await bot.send_message(message.from_user.id,'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é',reply_markup=kb_client_gold)

#@dp.message_handler(commands=['GJREGFDNM'])—Ç—É—Ç –ø–æ–∫—É–ø–∫–∞
#async def pokupka(message : types.Message):
#	await bot.send_message(-1001547431503,"@" + message.from_user.username + ": " + message.text[6:])


#@dp.message_handler(commands=[menu])—Ç—É—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def main_menu(message : types.Message):
	await commands_start(message)


async def reviews(message : types.Message):
	await bot.send_message(message.from_user.id,'–ù–∞—à–∏ –æ—Ç–∑—ã–≤—ã: (—Ç—É—Ç –±—É–¥–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏)')

class schet_gold(StatesGroup):
	my_gold = State()

#@dp.message_handler(commands=['–ü–æ—Å—á–∏—Ç–∞—Ç—å ü•á'])
async def pizza_place_command(message : types.Message):
	await bot.send_message(message.from_user.id,"ü•á –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞",reply_markup=kb_client_main_menu)#,reply_markup=ReplyKeyboardRemove())
	await schet_gold.my_gold.set()



#–°—á–∏—Ç–∞–µ—Ç –≥–æ–ª–¥—É
#@dp.message_handler(state=FSMAdmin.name)
async def count_gold(message: types.Message, state: FSMContext):
	await bot.send_message(message.from_user.id, message.photo[0].file_id)
	if message.text == ('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è'):
		await state.finish()
		await bot.send_message(message.from_user.id,'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è',reply_markup=kb_client)
	elif message.text.isdigit()==False:
		await bot.send_message(message.from_user.id,"–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")
	elif int(int(message.text)**2)**0.5!=int(message.text):
		await bot.send_message(message.from_user.id,"–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")

	elif int(message.text)<10:

		await bot.send_message(message.from_user.id,"–ú–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –º–∏–Ω–∏–º—É–º 10 –∑–æ–ª–æ—Ç–∞")
	else:
		async with state.proxy() as data:
			data['schet_gold'] = message.text
		price = int(int(message.text)/100*70)
		await bot.send_message(message.from_user.id,'–¶–µ–Ω–∞ –∑–∞ '+(message.text)+' –∑–æ–ª–æ—Ç–∞, '+str(price) +' —Ä—É–±.')
		#await bot.send_message(-1001547431503,"–ö–ª–∏–µ–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º " + str(message.text) +  " —Ö–æ—á–µ—Ç –∫—É–ø–∏—Ç—å:"+Name_bay)

#@dp.message_handler(commands=['–¥—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã'])
async def other_staf(callback : types.CallbackQuery):
	if True:
		await bot.send_message(callback.from_user.id,'–î–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç') 
	else:
		cnt = 1
		read = await db.staf_read()
		lists = ''
		if db.other_staf_exists():
			for i in range(len(read)):
				lists = f'{lists}\n'+str(cnt)+'. '+read[i][1]
				cnt+=1
			await bot.send_message(callback.from_user.id,f'–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:{lists}',reply_markup = kb_for_staf)
		else:
			await bot.send_message(callback.from_user.id,"–î–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")




#–∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
async def first_staf(message : types.CallbackQuery):
	read = await db.staf_read()
	ret = read[0]
	global name_ret
	name_ret = ret[1]
	#for ret in read:
	await message.message.delete()
	await bot.send_photo(message.from_user.id,ret[0],f"–ù–∞–∑–≤–∞–Ω–∏–µ:{ret[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {ret[2]}",reply_markup=InlineKeyboardMarkup(row_width=2).add(InlineKeyboardButton(text='–ö—É–ø–∏—Ç—å',callback_data = "buy_first_staf_")).add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥',callback_data = "back_to_staf_")))

async def buy_first_staf(callback : types.CallbackQuery):
	user_money = db.user_money(callback.from_user.id)
	await callback.message.delete()
	if user_money >= 3500:
		db.delete_staf(name_ret)
		db.set_money(callback.from_user.id, user_money-3500)
		await bot.send_message(callback.from_user.id,f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é –≤—ã –∫—É–ø–∏–ª–∏ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä!')
	else:
		await bot.send_message(callback.from_user.id,'–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!')

async def back_to_staf(callback : types.CallbackQuery):
	await callback.message.delete()
	await other_staf(callback)

#async def pizza_menu_command(message : types.Message):
#
#	#await sqlite_db.sql_read(message)
#	read = await sqlite_db.sql_read2()
#	for ret in read:
#		await bot.send_photo(message.from_user.id, ret[0], f'{ret[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ:{ret[2]}\n–¶–µ–Ω–∞ {ret[-1]}',disable_notification=True)
#		await bot.send_message(message.from_user.id, text='^^^', reply_markup=InlineKeyboardMarkup().\
#			add(InlineKeyboardButton(f'–ö—É–ø–∏—Ç—å {ret[1]}', callback_data=f'Send_bay {ret[1]}')),disable_notification=True)
#	await bot.send_message(message.from_user.id,'–í–æ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö —Ç–∞–≤–∞—Ä–æ–≤, —á—Ç–æ –±—ã –∫—É–ø–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥ –Ω—É–∂–Ω—ã–º —Ç–æ–≤–∞—Ä–æ–º')

#–∫–µ–π—Å—ã kb_chests
async def chests(message : types.Message):
	await bot.send_message(message.from_user.id,'–í—ã–±–µ—Ä–∏—Ç–µ –∫–µ–π—Å –∏–∑ —Å–ø–∏—Å–∫–∞:',reply_markup =kb_chests )




#text_for_help = "1. –ü–æ—á–µ–º—É —è –ø–æ–ø–æ–ª–Ω—è—é –≤ –≥—Ä–∏–≤–Ω–∞—Ö, –∞ –º–Ω–µ –ø—Ä–∏—à–ª–æ –º–µ–Ω—å—à–µ —Ä—É–±–ª–µ–π, —á–µ–º –ø–∏—à–µ—Ç –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ?\n2. –°–∫–æ–ª—å–∫–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–≤–æ–¥—è—Ç –∑–æ–ª–æ—Ç–æ?\n3. –ü–æ—á–µ–º—É —Ç–∞–∫ –¥–æ–ª–≥–æ –ø—Ä–æ–≤–µ—Ä—è—é—Ç —á–µ–∫?\n4. –ü–æ—á–µ–º—É –º–Ω–µ –Ω–µ –ø—Ä–∏—à–ª–∏ –¥–µ–Ω—å–≥–∏?\n5. –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ª–∏ —É –≤–∞—Å –ø–æ–∫—É–ø–∞—Ç—å?\n6. –ú–æ–∂–Ω–æ –ª–∏ –≤–∞–º –ø—Ä–æ–¥–∞—Ç—å –∑–æ–ª–æ—Ç–æ/–∫–ª–∞–Ω—ã/–∞–∫–∫–∞—É–Ω—Ç/—Å–∫–∏–Ω—ã?\n7. –ü–æ—á–µ–º—É —Ç–∞–∫ –¥–æ–ª–≥–æ –≤—ã–≤–æ–¥—è—Ç –∑–æ–ª–æ—Ç–æ?\n\n–ï—Å–ª–∏ –≤—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–≤—è–∑–∞—Ç—å—Å—è"
#@dp.message_handler(message: types.Message)—Ç–µ—Ö –ø–æ–º–æ—â
async def tech_help (message: types.Message):

	help_button = InlineKeyboardMarkup().add(InlineKeyboardButton(text='–°–≤—è–∑–∞—Ç—å—Å—è',callback_data = "help_8_"))
	await bot.send_message(message.from_user.id,f'–í–∞—à id:{message.from_user.id}\n–•–æ—Ç–∏—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π?',reply_markup=help_button)

	#await bot.send_message(message.from_user.id,text_for_help,reply_markup=kb_for_help)


################–ò–ù–õ–ê–ô–ù –ö–ù–û–ü–ö–ò –¢–ï–• –ü–û–ú–û–©–ò#############
async def help_for_1(callback: types.CallbackQuery):
	await callback.message.delete()
	await bot.send_message(callback.from_user.id,'–ú—ã –Ω–µ —è–≤–ª—è–µ–º—Å—è –±–∏—Ä–∂–µ–π –≤–∞–ª—é—Ç, –≤—ã —É –Ω–∞—Å –ø–æ–∫—É–ø–∞–µ—Ç–µ –∑–æ–ª–æ—Ç–æ, –∞ –Ω–µ —Ä—É–±–ª–∏. –¢–æ –µ—Å—Ç—å, –º—ã –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤–∞—à–∏ –≥—Ä–∏–≤–Ω—ã –≤ –∑–æ–ª–æ—Ç–æ. –ü–æ—Å–ª–µ, –∑–æ–ª–æ—Ç–æ –≤ —Ä—É–±–ª–∏.',reply_markup=kb_for_contact_or_back)

async def help_for_2(callback: types.CallbackQuery):
	await callback.message.delete()
	await bot.send_message(callback.from_user.id,'–í—ã–≤–æ–¥ –∑–æ–ª–æ—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¥–æ 24 —á–∞—Å–æ–≤ –æ—Ç –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥. –ù–æ –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ –≤—ã–≤–æ–¥ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ–∫—É–Ω–¥ –¥–æ —á–∞—Å–∞.',reply_markup=kb_for_contact_or_back)

async def help_for_3(callback: types.CallbackQuery):
	await callback.message.delete()
	await bot.send_message(callback.from_user.id,'–ß–µ–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –≤ —Ä—É—á–Ω—É—é, –∞ –Ω–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ï—Å–ª–∏ –≤—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ —Ä–∞–Ω–æ —É—Ç—Ä–æ–º –∏–ª–∏ –ø–æ–∑–¥–Ω–æ –≤–µ—á–µ—Ä–æ–º, —Ç–æ –Ω–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –Ω–µ —Å–º–æ–≥—É—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ–∫. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 24 —á–∞—Å–æ–≤.',reply_markup=kb_for_contact_or_back)

async def help_for_4(callback: types.CallbackQuery):
	await callback.message.delete()
	await bot.send_message(callback.from_user.id,'–ï—Å–ª–∏ –≤—ã –ø–æ–ø–æ–ª–Ω—è–ª–∏ —á–µ—Ä–µ–∑ QIWI, —Ç–æ –Ω–∞–π–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–¥–µ –≤–∞–º –≤—ã–¥–∞–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É, –∏ –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±—É–¥–µ—Ç –∫–Ω–æ–ø–∫–∞ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª –Ω–∞–∂–º–∏—Ç–µ –µ—ë. –ù–æ –µ—Å–ª–∏ –≤—ã –ø–æ–ø–æ–ª–Ω—è–ª–∏ –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º, —Ç–æ –≤—ã, –≤–æ–∑–º–æ–∂–Ω–æ, —Å–∫–∏–Ω—É–ª–∏ –±–æ—Ç—É —á–µ–∫ —Ñ–∞–π–ª–æ–º. –í –ø–æ–¥–æ–±–Ω–æ–º —Å–ª—É—á–∞–µ, –Ω–∞–∂–º–∏—Ç–µ: "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"; —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É; "–î—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º"; " –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ ". –ü–æ—Å–ª–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞.',reply_markup=kb_for_contact_or_back)

async def help_for_5(callback: types.CallbackQuery):
	await callback.message.delete()
	await bot.send_message(callback.from_user.id,'–í–µ—Å—å —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–¥–∞—ë—Ç—Å—è –≤ –±–æ—Ç–µ, –ø–æ–ª—É—á–µ–Ω —á–µ—Å—Ç–Ω—ã–º –ø—É—Ç—ë–º. –ï—Å–ª–∏ –≤—ã —Å–æ–º–Ω–µ–≤–∞–µ—Ç–µ—Å—å –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, —Ç–æ –ª—É—á—à–µ –ø–æ–∫—É–ø–∞—Ç—å –≤ –∏–≥—Ä–µ.',reply_markup=kb_for_contact_or_back)

async def help_for_6(callback: types.CallbackQuery):
	await callback.message.delete()
	await bot.send_message(callback.from_user.id,'–ú—ã –Ω–µ –ø–æ–∫—É–ø–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ç–∞–∫ –∫–∞–∫, –Ω–µ –∑–Ω–∞–µ–º, –æ—Ç–∫—É–¥–∞ –æ–Ω–∏ –∏—Ö –¥–æ—Å—Ç–∞–ª–∏, –∞ –µ—Å–ª–∏ –∑–Ω–∞–µ–º, —ç—Ç–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≥–∞—Ä–∞–Ω—Ç–∏–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –ø–µ—Ä–≤–æ–º –º–µ—Å—Ç–µ –¥–ª—è –Ω–∞—Å, –∏ –º—ã –ø—Ä–æ–¥–∞—ë–º —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Ç–æ–≤–∞—Ä—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —É–≤–µ—Ä–µ–Ω–Ω—ã –Ω–∞ 100%',reply_markup=kb_for_contact_or_back)

async def help_for_7(callback: types.CallbackQuery):
	await callback.message.delete()
	await bot.send_message(callback.from_user.id,'–í—ã–≤–æ–¥ –∑–æ–ª–æ—Ç–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 24 —á–∞—Å–æ–≤. –ù–æ –º—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –≤—ã–≤–µ—Å—Ç–∏ –≤–∞–º –∑–æ–ª–æ—Ç–æ. –í –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤, –µ—Å—Ç—å –æ—á–µ—Ä–µ–¥—å, –∏ –ø–æ–∫–∞ –æ–Ω–∞ –¥–æ–π–¥—ë—Ç –¥–æ –≤–∞—Å, –º–æ–∂–µ—Ç –ø—Ä–æ–π—Ç–∏ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ù–æ –µ—Å–ª–∏ –≤—ã —É–∂–µ –ø–æ–ª —á–∞—Å–∞ –∫–∞–∫ –Ω–∞ 1 –º–µ—Å—Ç–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å —Ä—ã–Ω–∫–æ–º ( —Å–ª–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å —Å–∫–∏–Ω) –∏–ª–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫ –≤–∑—è–ª –ø–µ—Ä–µ—Ä—ã–≤.',reply_markup=kb_for_contact_or_back)		

async def help_for_back(callback: types.CallbackQuery):
	await callback.message.delete()
	await bot.send_message(callback.from_user.id,text_for_help,reply_markup=kb_for_help)


class tech_qvest(StatesGroup):
	qvest = State()
async def need_tech_help (callback:types.CallbackQuery):
	await callback.message.delete()
	await bot.send_message(callback.from_user.id,'–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å',reply_markup=kb_client_main_menu)
	await tech_qvest.qvest.set()

async def take_qvest (message:types.Message,state = FSMContext):
	if message.text!="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è":
		if db.support_exists(message.from_user.id):
			await state.finish()
			await bot.send_message(message.from_user.id,'–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É')
		else:
			db.add_support(message.from_user.id)
			qvest = str(message.text)
			chat_id = message.chat.id
			button_url = f'tg://user?id={chat_id}'
			markup = types.InlineKeyboardMarkup()
			markup.add(types.InlineKeyboardButton(text='–°–≤—è–∑–∞—Ç—å—Å—è', url=button_url),InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –µ–≥–æ –∑–∞–ø—Ä–æ—Å',callback_data =f'del_support {message.from_user.id}'))
			await bot.send_message(admin_chat_id,qvest, reply_markup=markup)	
			await bot.send_message(message.from_user.id,'–û–∂–∏–¥–∞–π—Ç–µ, –≤–∞–º –æ—Ç–≤–µ—Ç—è—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è')
			await state.finish()
	else:
		await state.finish()
		await commands_start(message)
		await bot.send_message(message.from_user.id,'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è')

async def del_support (callback:types.CallbackQuery):
	await callback.message.delete()
	id_user = callback['data'].replace('del_support ','')
	db.delete_support(id_user)
	await bot.send_message(admin_chat_id,'–ó–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –±—ã–ª —É–¥–∞–ª–µ–Ω')
#######################–ò–ù–õ–ê–ô–ù –ö–ù–û–ü–ö–ò –î–õ–Ø –ö–ï–ô–°–û–í##################################


async def nachalo(callback: types.CallbackQuery):
	await callback.message.delete()
	text = '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–µ–π—Å–∞ –ù–∞—á–∞–ª–æ:\n\nST Desert Eagle ‚ÄòRed Dragon‚Äô - 20G\nST FAMAS ‚ÄòBeagle‚Äô - 30G\nST AKR12 ‚ÄòFlow‚Äô - 28G\nST AKR12 ‚ÄòTransistor‚Äô 29 - 29G\nP90 ‚ÄòGhoul‚Äô - 30G\nP350 ‚ÄòNeon‚Äô - 35G\nAKR12 ‚Äò4 Years‚Äô - 42G\nSticker ‚Äò4 Years Color‚Äô - 62G\nMP7 ‚ÄòGraffity‚Äô - 30G'
	await bot.send_message(callback.from_user.id,text,reply_markup=InlineKeyboardMarkup(row_width=2).add(InlineKeyboardButton(text='–û—Ç–∫—Ä—ã—Ç—å –∑–∞ 25 —Ä—É–±.',callback_data = "buy_nachalo_")).add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥',callback_data = "back_to_chest_")))

async def opit_chest(callback: types.CallbackQuery):
	text = '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–µ–π—Å–∞ –û–ø—ã—Ç–Ω—ã–π:\n\nUMP45 ‚ÄòCyberpunk‚Äô - 37G\nCharm ‚ÄòKatana‚Äô - 44G\nChibi ‚ÄòCrunch‚Äô - 55G\nST  FabM ‚ÄòParrot‚Äô - 63G\nMP7 ‚ÄòWinter Sport‚Äô - 60G\nST AWM ‚ÄòPolar Night - 71G\nMP7 ‚Äò2 Years‚Äô - 67G\nAKR ‚ÄòNecromancer‚Äô - 83G\nP350 ‚ÄòForest Spirit‚Äô - 112G'
	await callback.message.delete()
	await bot.send_message(callback.from_user.id,text,reply_markup=InlineKeyboardMarkup(row_width=2).add(InlineKeyboardButton(text='–û—Ç–∫—Ä—ã—Ç—å –∑–∞ 50 —Ä—É–±.',callback_data = "buy_opit_chest_")).add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥',callback_data = "back_to_chest_")))

async def god_chest(callback: types.CallbackQuery):
	text = '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–µ–π—Å–∞ –ë–æ–≥:\n\nST AKR ‚ÄòNano‚Äô - 87G\nG22 ‚ÄòMonster‚Äô - 99G\nP90 ‚ÄòSamurai‚Äô - 121G\nCharm ‚ÄòSale‚Äô - 140G\nST F/S ‚ÄòRush‚Äô - 157G\nCase ‚ÄòFurious‚Äô - 170G\nST AKR ‚ÄòCarbon‚Äô - 118G\nM40 ‚ÄòWinter Track‚Äô - 145G\nCharm ‚ÄòCone‚Äô - 200G'
	await callback.message.delete()
	await bot.send_message(callback.from_user.id,text,reply_markup=InlineKeyboardMarkup(row_width=2).add(InlineKeyboardButton(text='–û—Ç–∫—Ä—ã—Ç—å –∑–∞ 100 —Ä—É–±.',callback_data = "buy_god_chest_")).add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥',callback_data = "back_to_chest_")))

async def major_chest(callback: types.CallbackQuery):
	text = '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–µ–π—Å–∞ –ú–∞–∂–æ—Ä:\n\nP350 ‚ÄòRadiation‚Äô - 444G\nMP7 ‚ÄòBlizzard‚Äô - 500G\nCharm ‚ÄòZen‚Äô - 620G\nST AKR12 ‚ÄòGeometric‚Äô - 650G\nAWM ‚ÄòSport‚Äô - 697G\nST P90 ‚ÄòSamurai‚Äô - 710G\nFAMAS ‚ÄòMonster‚Äô - 774G\nM4 ‚ÄòSamurai‚Äô - 801G\nFlip ‚ÄòSnow Camo‚Äô - 1020G'
	await callback.message.delete()
	await bot.send_message(callback.from_user.id,text,reply_markup=InlineKeyboardMarkup(row_width=2).add(InlineKeyboardButton(text='–û—Ç–∫—Ä—ã—Ç—å –∑–∞ 555 —Ä—É–±.',callback_data = "buy_major_chest_")).add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥',callback_data = "back_to_chest_")))

async def gold_chest(callback: types.CallbackQuery):
	text = '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–µ–π—Å–∞ –ó–æ–ª–æ—Ç–æ–π:\n\nFN FAL ‚ÄòPhoenix Rise‚Äô - 860G\nDeser Eagle ‚ÄòYakuzƒÖ‚Äô - 867G\nUSP ‚ÄòGeometric‚Äô - 904G\nST FAMAS ‚ÄòFury‚Äô - 950G\nScorpion ‚ÄòSea Yes‚Äô - 1000G\nFlip ‚ÄòFrozen‚Äô - 1123G\nKunai ‚ÄòCold Flame‚Äô - 1250G\nFlip ‚ÄòVortex‚Äô - 1297G\nKnife Tanto ‚ÄòDojo‚Äô - 1600G'
	await callback.message.delete()
	await bot.send_message(callback.from_user.id,text,reply_markup=InlineKeyboardMarkup(row_width=2).add(InlineKeyboardButton(text='–û—Ç–∫—Ä—ã—Ç—å –∑–∞ 777 —Ä—É–±.',callback_data = "buy_gold_chest_")).add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥',callback_data = "back_to_chest_")))

def time_now():
	now = str(datetime.datetime.now())
	time = now.split('.')[0]
	time = time.replace('-','')
	time = time.replace(' ','')
	time = time.replace(':','')
	return time
def time_list_now(time_list):
	time = [time_list[0:4],time_list[4:6],time_list[6:8],time_list[8:10],time_list[10:12],time_list[12:14]]
	 ###########–ì–û–î##########–ú–ï–°–Ø–¶###########–î–ï–ù–¨##############–ß–ê–°##########–ú–ò–ù–£–¢–ê###########–°–ï–ö–£–ù–î–ê#######
	return time
def time_to_string(time):
	now = ''
	for i in range(6):
		now = now+str((time)[i])
	return now

###############################################–ü–û–õ–ò–ù–ê –ü–ò–°–Æ–ù###############################

async def free_chest(callback: types.CallbackQuery):
	chest_time = db.user_free_chest(callback.from_user.id)
	if (len(str(chest_time)) == 3):
		free_gold_win = random.randint(1,5)
		user_gold = db.user_gold(callback.from_user.id)
		db.set_gold(callback.from_user.id, user_gold+(free_gold_win))
		time = time_list_now(time_now())
		new_day=int(time[2])+3
		if new_day<10:
			new_day = '0'+str(new_day)
		new_day = str(new_day)
		time[2] = new_day
		db.set_free_chest(callback.from_user.id,str(time_to_string(time)))
		await callback.message.delete()
		await bot.send_message(callback.from_user.id,f'–ù–∞ –≤–∞—à —Å—á–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ {free_gold_win}G')
	elif int(chest_time)<= int(time_now()):
		#print(int(chest_time))
		free_gold_win = random.randint(1,5)
		user_gold = db.user_gold(callback.from_user.id)
		db.set_gold(callback.from_user.id, user_gold+(free_gold_win))
		time = time_list_now(time_now())
		new_day=int(time[2])+3
		if new_day<10:
			new_day = '0'+str(new_day)
		new_day = str(new_day)
		time[2] = new_day
		db.set_free_chest(callback.from_user.id,str(time_to_string(time)))
		await callback.message.delete()
		await bot.send_message(callback.from_user.id,f'–ù–∞ –≤–∞—à —Å—á–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ {free_gold_win}G')		
	else:
		chest_time = time_list_now(str(chest_time))
		time = time_list_now(time_now())
		time_can = datetime.timedelta(days=int(time[2]),hours= int(time[3]), minutes=int(time[4]), seconds=int(time[5]))
		time_cur = datetime.timedelta(days = int(chest_time[2]),hours= int(chest_time[3]) , minutes=int(chest_time[4]), seconds=int(chest_time[5]))
		delta = time_cur - time_can
		delta = str(delta).split(' ')
		chours = delta[2].split(':')	
		count_hours = f'{chours[0]}:{chours[1]}:{chours[2]}'
		await callback.message.delete()
		await bot.send_message(callback.from_user.id,f'–í—ã —É–∂–µ –æ—Ç–∫—Ä—ã–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–µ–π—Å.\n–°–ª–µ–¥—É—é—â–∏–π –∫–µ–π—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑: {delta[0]} –¥–Ω–µ–π, {count_hours}')

async def back_to_chest(callback: types.CallbackQuery):
	await callback.message.delete()
	await chests(callback)


###############################–û–¢–ö–†–´–¢–ò–ï –ö–ï–ô–°–û–í############################################
async def buy_nachalo(callback: types.CallbackQuery):
	user_money = db.user_money(callback.from_user.id)
	await callback.message.delete()
	if user_money >= 25:

		db.set_money(callback.from_user.id, user_money-25)
		can_win = ['ST Desert Eagle ‚ÄòRed Dragon‚Äô - 20G','ST FAMAS ‚ÄòBeagle‚Äô - 30G','ST AKR12 ‚ÄòFlow‚Äô - 28G','ST AKR12 ‚ÄòTransistor‚Äô 29 - 29G','P90 ‚ÄòGhoul‚Äô - 30G','P350 ‚ÄòNeon‚Äô - 35G','AKR12 ‚Äò4 Years‚Äô - 42G','Sticker ‚Äò4 Years Color‚Äô - 62G','MP7 ‚ÄòGraffity‚Äô - 30G']
		win = can_win[random.randint(0,len(can_win)-1)].split('-')
		await bot.send_message(callback.from_user.id,f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤–∞–º –≤—ã–ø–∞–ª–æ {win[0]} —Å—Ç–æ–∏–º–æ—Å—Ç—å—é {win[1]}.\n–ù–∞ –≤–∞—à —Å—á–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ {win[1].strip('G')} –∑–æ–ª–æ—Ç–∞")
		user_gold = db.user_gold(callback.from_user.id)
		db.set_gold(callback.from_user.id, user_gold+int(win[1].strip('G')))
	else:
		await bot.send_message(callback.from_user.id,'–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!')

async def buy_opit_chest(callback: types.CallbackQuery):
	user_money = db.user_money(callback.from_user.id)
	await callback.message.delete()
	if user_money >= 50:

		db.set_money(callback.from_user.id, user_money-50)
		can_win = ['UMP45 ‚ÄòCyberpunk‚Äô - 37G','Charm ‚ÄòKatana‚Äô - 44G','Chibi ‚ÄòCrunch‚Äô - 55G','ST  FabM ‚ÄòParrot‚Äô - 63G','MP7 ‚ÄòWinter Sport‚Äô - 60G','ST AWM ‚ÄòPolar Night - 71G','MP7 ‚Äò2 Years‚Äô - 67G','AKR ‚ÄòNecromancer‚Äô - 83G','P350 ‚ÄòForest Spirit‚Äô - 112G']
		win = can_win[random.randint(0,len(can_win)-1)].split('-')
		await bot.send_message(callback.from_user.id,f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤–∞–º –≤—ã–ø–∞–ª–æ {win[0]} —Å—Ç–æ–∏–º–æ—Å—Ç—å—é {win[1]}.\n–ù–∞ –≤–∞—à —Å—á–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ {win[1].strip('G')} –∑–æ–ª–æ—Ç–∞")
		user_gold = db.user_gold(callback.from_user.id)
		db.set_gold(callback.from_user.id, user_gold+int(win[1].strip('G')))
	else:
		await bot.send_message(callback.from_user.id,'–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!')

async def buy_god_chest(callback: types.CallbackQuery):
	user_money = db.user_money(callback.from_user.id)
	await callback.message.delete()
	if user_money >= 100:

		db.set_money(callback.from_user.id, user_money-100)
		can_win = ['ST AKR ‚ÄòNano‚Äô - 87G','G22 ‚ÄòModnster‚Äô - 99G','P90 ‚ÄòSamurai‚Äô - 121G','Charm ‚ÄòSale‚Äô - 140G','ST F/S ‚ÄòRush‚Äô - 157G','Case ‚ÄòFurious‚Äô - 170G','ST AKR ‚ÄòCarbon‚Äô - 118G','M40 ‚ÄòWinter Track‚Äô - 145G','Charm ‚ÄòCone‚Äô - 200G']
		win = can_win[random.randint(0,len(can_win)-1)].split('-')
		await bot.send_message(callback.from_user.id,f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤–∞–º –≤—ã–ø–∞–ª–æ {win[0]} —Å—Ç–æ–∏–º–æ—Å—Ç—å—é {win[1]}.\n–ù–∞ –≤–∞—à —Å—á–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ {win[1].strip('G')} –∑–æ–ª–æ—Ç–∞")
		user_gold = db.user_gold(callback.from_user.id)
		db.set_gold(callback.from_user.id, user_gold+int(win[1].strip('G')))
	else:
		await bot.send_message(callback.from_user.id,'–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!')


async def buy_major_chest(callback: types.CallbackQuery):
	user_money = db.user_money(callback.from_user.id)
	await callback.message.delete()
	if user_money >= 555:

		db.set_money(callback.from_user.id, user_money-555)
		can_win = ['P350 ‚ÄòRadiation‚Äô - 444G','MP7 ‚ÄòBlizzard‚Äô - 500G','Charm ‚ÄòZen‚Äô - 620G','ST AKR12 ‚ÄòGeometric‚Äô - 650G','AWM ‚ÄòSport‚Äô - 697G','ST P90 ‚ÄòSamurai‚Äô - 710G','FAMAS ‚ÄòMonster‚Äô - 774G','M4 ‚ÄòSamurai‚Äô - 801G','Flip ‚ÄòSnow Camo‚Äô - 1020G']
		win = can_win[random.randint(0,len(can_win)-1)].split('-')
		await bot.send_message(callback.from_user.id,f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤–∞–º –≤—ã–ø–∞–ª–æ {win[0]} —Å—Ç–æ–∏–º–æ—Å—Ç—å—é {win[1]}.\n–ù–∞ –≤–∞—à —Å—á–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ {win[1].strip('G')} –∑–æ–ª–æ—Ç–∞")
		user_gold = db.user_gold(callback.from_user.id)
		db.set_gold(callback.from_user.id, user_gold+int(win[1].strip('G')))
	else:
		await bot.send_message(callback.from_user.id,'–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!')

async def buy_gold_chest(callback: types.CallbackQuery):
	user_money = db.user_money(callback.from_user.id)
	await callback.message.delete()
	if user_money >= 777:

		db.set_money(callback.from_user.id, user_money-777)
		can_win = ['FN FAL ‚ÄòPhoenix Rise‚Äô - 860G','Deser Eagle ‚ÄòYakuzƒÖ‚Äô - 867G','USP ‚ÄòGeometric‚Äô - 904G','ST FAMAS ‚ÄòFury‚Äô - 950G','Scorpion ‚ÄòSea Yes‚Äô - 1000G','Flip ‚ÄòFrozen‚Äô - 1123G','Kunai ‚ÄòCold Flame‚Äô - 1250G','Flip ‚ÄòVortex‚Äô - 1297G','Knife Tanto ‚ÄòDojo‚Äô - 1600G']
		win = can_win[random.randint(0,len(can_win)-1)].split('-')
		await bot.send_message(callback.from_user.id,f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤–∞–º –≤—ã–ø–∞–ª–æ {win[0]} —Å—Ç–æ–∏–º–æ—Å—Ç—å—é {win[1]}.\n–ù–∞ –≤–∞—à —Å—á–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ {win[1].strip('G')} –∑–æ–ª–æ—Ç–∞")
		user_gold = db.user_gold(callback.from_user.id)
		db.set_gold(callback.from_user.id, user_gold+int(win[1].strip('G')))
	else:
		await bot.send_message(callback.from_user.id,'–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!')

async def help_for_back(callback: types.CallbackQuery):
	await callback.message.delete()
	await bot.send_message(callback.from_user.id,text_for_help,reply_markup=kb_for_help)

#######################–ò–ù–õ–ê–ô–ù –ö–ù–û–ü–ö–ò –î–õ–Ø –ö–ï–ô–°–û–í##################################


async def check(callback: types.CallbackQuery):
	await callback.message.delete()
	bill = str(callback.data[6:])
	info = db.get_check(bill)
	if info != False:
		if str(p2p.check(bill_id=bill).status) =="PAID":
			user_money = db.user_money(callback.from_user.id)

			money = int(info[2])
			db.set_money(callback.from_user.id, user_money+money)
			await bot.send_message(callback.from_user.id,f"–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞!\n–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω")
			db.delete_check(bill)
			id_referrer = db.user_referrer(callback.from_user.id)
			if id_referrer is not None:
				ref_gold = db.user_gold(id_referrer)
				db.set_gold(id_referrer,int(ref_gold)+5)
				await bot.send_message(id_referrer,"–í—ã –ø–æ–ª—É—á–∏–ª–∏ 5 –∑–æ–ª–æ—Ç–∞ –∑–∞ –ø–æ–∫—É–ø–∫—É –≤–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞")
		else:
			await bot.send_message(callback.from_user.id,"–í–∞—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!\n–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",reply_markup=buy_menu(False,bill=bill))
	else:
		await bot.send_message(callback.from_user.id,"–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

class vladd(StatesGroup):
	vlad = State()
async def send_vlad(message:types.Message):
	await bot.send_message(message.from_user.id,f'—á–µ —Å–∫–∞–∑–∞—Ç—å –≤–ª–∞–¥—É?')
	await vladd.vlad.set()
class Mos_shop(StatesGroup):
	shop = State()

async def Moscow_shop(message:types.Message):
	user_data = db.about_user(message.from_user.id)[0]
	if user_data[6] == "–ú–æ—Å–∫–≤–∞" or user_data[23] >= 1 :
		kb = ReplyKeyboardMarkup()\
		.add(KeyboardButton("–û—á–∫–∏"))\
		.add(KeyboardButton("–ú–∞–π–∫–∏"))\
		.add(KeyboardButton("–•—É–¥–∏"))\
		.add(KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è"))
		if user_data[23] == 1:
			await bot.send_message(message.from_user.id,'–¢–≤–æ–µ —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ\n–ö—É–ø–∏ —Å–µ–±–µ –ª—é–±—É—é –≤–µ—â—å –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É')
		await bot.send_photo(message.from_user.id,open("skin/moscow_shop.jpg",'rb'),'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω "Gussi"!\n–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä—É—é –æ–¥–µ–∂–¥—ã',reply_markup =kb)
		await Mos_shop.shop.set()
	else:
		await bot.send_message(message.from_user.id,"–≠—Ç–æ–≥–æ –Ω–µ—Ç –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ, –æ—Ç–∫—Ä–æ–π –∫–∞—Ä—Ç—É")


async def pick_mos_shop (message:types.Message,state:FSMContext):
	if message.text != '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è':
		if message.text == "–û—á–∫–∏":
			await bot.send_message(message.from_user.id,'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –æ—á–∫–æ–≤!\n–¢—É—Ç –º—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ—á–∫–∏ –Ω–∞ –ª—é–±–æ–π –≤–∫—É—Å!',reply_markup =types.ReplyKeyboardRemove())
			global position_glasses
			position_glasses = {message.from_user.id:0}
			await show_glasses(message,'glasses')
			await state.finish()
		elif message.text == "–ú–∞–π–∫–∏":
			await bot.send_message(message.from_user.id,'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –º–∞–µ–∫!\n–¢—É—Ç –º—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –º–∞–π–∫–∏ –Ω–∞ –ª—é–±–æ–π –≤–∫—É—Å!',reply_markup =types.ReplyKeyboardRemove())
			global position_Tshirt
			position_Tshirt = {message.from_user.id:0}
			await show_glasses(message,'t-shirt')
			await state.finish()

		elif message.text == "–•—É–¥–∏":
			await bot.send_message(message.from_user.id,'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –•—É–¥–∏!\n–¢—É—Ç –º—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –º–∞–π–∫–∏ –Ω–∞ –ª—é–±–æ–π –≤–∫—É—Å!',reply_markup =types.ReplyKeyboardRemove())
			global position_hoody
			position_hoody = {message.from_user.id:0}
			await show_glasses(message,'hoody')
			await state.finish()			
	else:
		await state.finish()
		await bot.send_message(message.from_user.id,'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è')
		await main_menu(message)



async def Barbershop_shop(message:types.Message):
	user_data = db.about_user(message.from_user.id)[0]
	if user_data[6] == "–ü–∏—Ç–µ—Ä":
		global position_SPB_barbershop
		position_SPB_barbershop = {message.from_user.id:0}
		await bot.send_message(message.from_user.id,f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞—Ä–∏—Ö–º–∞—Ö–µ—Ä—Å–∫—É—é!–¢—É—Ç —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±–∞—Ä—Ç—å —Å–µ–±–µ –ø—Ä–∏—á–µ—Å–∫—É –∏ –ø–æ–º–µ–Ω—è—Ç—å –µ–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è!')
		await show_glasses(message,'SPB_barbershop')
		if user_data[23] == 3:
			db.set_user_data(message.from_user.id,'can_home',1)
			db.set_user_data(message.from_user.id,'Level_task',4)								
			db.set_user_data(message.from_user.id,'gold',user_data[12]+500)
			await bot.send_message(message.from_user.id,'–ú–æ–ª–æ–¥–µ—Ü, —Ç—ã –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ!–ú–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∫–∞–∫–∏–µ —Å—Ç—Ä–∏–∂–∫–∏ —Ç–µ–±–µ –¥–æ—Å—Ç—É–∏–Ω—ã, –ª–∏–±–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è –¥–∞–ª—å—à–µ\n\n–¢–≤–æ—è –Ω–∞–≥—Ä–∞–¥–∞\n1.500 –∑–æ–ª–æ—Ç–∞ü•á\n2.–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–æ–º–∞\n3.–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ—Å–µ—Ç–∏—Ç—å –°–æ—á–∏\n\n–ó–∞–≥–ª—è–Ω–∏ –≤ –º–µ–Ω—é "–î–æ–º", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ')
	else:
		await bot.send_message(message.from_user.id,"–≠—Ç–æ–≥–æ –Ω–µ—Ç –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ, –æ—Ç–∫—Ä–æ–π –∫–∞—Ä—Ç—É")


async def show_glasses(message,category):
	backround = None
	new_hair = None
	if category == "glasses":
		global position_glasses
		#files = [x for x in os.listdir(f'skin/shop/{category}') if category in x]#–ò—â–µ–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
		files = db.items_base_data(category)
		#file = files[position_glasses[message.from_user.id]]

		if position_glasses[message.from_user.id] > len(files)-1 or position_glasses[message.from_user.id] < -(len(files)-1):#–ù—É–∂–Ω–æ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∫—Ä—É—Ç–∏—Ç—å –ø–æ –∫—Ä—É–≥—É
			position_glasses[message.from_user.id] = 0
		file = files[position_glasses[message.from_user.id]]
		#ph = open(f'skin/shop/{category}/{files[position_glasses[message.from_user.id]]}','rb')#–û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É

		ph = open(f'skin{file[1]}.png','rb')#–û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É

		#price =(files[position_glasses[message.from_user.id]].split('('))[1].split(')')[0]#–£–∑–Ω–∞–µ–º —Ü–µ–Ω—É –Ω—É–∂–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
		price = file[3]

		#text = [f'"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—á–∫–∏"\n–°—Ç–æ–∏–º–æ—Å—Ç—å:{price}G\n\n–ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—Ç—Å—è —Ö–æ–¥–∏—Ç—å —Å –æ—á–∫–∞–º–∏ –Ω–æ –¥–µ–Ω–µ–≥ –Ω–µ—Ç, —Ç–æ —ç—Ç–æ –ª—É—á—à–∏–π –≤—ã–±–æ—Ä!',f'"–û—á–∫–∏ –ø–æ–±–ª–∞—Ç–Ω–µ–µ"\nC—Ç–æ–∏–º–æ—Å—Ç—å:{price}G\n–î–ª—è —Ç–µ—Ö –∫—Ç–æ –Ω–µ –Ω–∞ –ø–æ–º–æ–π–∫–µ —Å–µ–±—è –Ω–∞—à–µ–ª, –Ω–æ –¥–µ–Ω–µ–≥ –Ω–µ –º–Ω–æ–≥–æ',f'"–û—á–∫–∏ –¥–ª—è –ø–ª–∞–≤–∞–Ω–∏—è"\n–°—Ç–æ–∏–º–æ—Å—Ç—å:{price}G\n–ß—Ç–æ –±—ã —à–∞–º–ø—É–Ω—å –≤ –≥–ª–∞–∑–∞ –Ω–µ –ø–æ–ø–∞–ª)',f'"–û—á–∫–∏ –≥—É—Å–∏"\n–°—Ç–æ–∏–º–æ—Å—Ç—å:{price}G\n–¢—É–ø–∞ —Å—Ç–∏–ª—å']#–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
		#text = file[5]

		#name = text[position_glasses[message.from_user.id]].split('\n')[0] 
		name = file[2]

		#directory_clothes = files[position_glasses[message.from_user.id]][:-4]#–£–∑–Ω–∞–µ–º –ø—É—Ç—å –Ω—É–∂–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏ —Å—Ä–µ–∑–∞–µ–º .png
		directory_clothes = file[1]

		#text_clothes = text[position_glasses[message.from_user.id]]#–û–ø–∏—Å–∞–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
		text_clothes = f'{name}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {price}G\n{file[5]}'

		#new_glasses = f'shop/{category}/{directory_clothes}'#–§–∏–∫—Å–∏—Ä—É–µ–º —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –Ω–æ–≤—ã–µ –æ—á–∫–∏ –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–∫–∏
		new_glasses = directory_clothes
		new_body = None #–§–∏–∫—Å–∏—Ä—É–µ–º —á—Ç–æ –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Ö—É–¥–∏

	elif category == 't-shirt':#–í—Å–µ —Ç–æ–∂–µ —Å–∞–º–æ–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∞–µ–∫
		global position_Tshirt
		files = db.items_base_data(category)
		file = files[position_Tshirt[message.from_user.id]]
		if position_Tshirt[message.from_user.id] > len(files)-1 or position_Tshirt[message.from_user.id] < -(len(files)-1):
			position_Tshirt[message.from_user.id] = 0
		ph = open(f'skin{file[1]}.png','rb')
		price = file[3]
		name = file[2]
		directory_clothes = file[1]
		text_clothes = f'{name}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {price}G\n{file[5]}'
		new_glasses = None
		new_body = directory_clothes

	elif category == 'hoody':#–í—Å–µ —Ç–æ–∂–µ —Å–∞–º–æ–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ö—É–¥–∏
		global position_hoody
		files = db.items_base_data(category)
		file = files[position_hoody[message.from_user.id]]
		if position_hoody[message.from_user.id] > len(files)-1 or position_hoody[message.from_user.id] < -(len(files)-1):
			position_hoody[message.from_user.id] = 0
		ph = open(f'skin{file[1]}.png','rb')
		price = file[3]
		name = file[2]	
		directory_clothes = file[1]
		text_clothes = f'{name}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {price}G\n{file[5]}'
		new_glasses = None
		new_body = directory_clothes


	elif category == 'SPB_barbershop':
		global position_SPB_barbershop
		files = db.items_base_data(category)
		file = files[position_SPB_barbershop[message.from_user.id]]
		if position_SPB_barbershop[message.from_user.id] > len(files)-1 or position_SPB_barbershop[message.from_user.id] < -(len(files)-1):
			position_SPB_barbershop[message.from_user.id] = 0
		ph = open(f'skin{file[1]}.png','rb')
		price = file[3]
		#text = [f'–•—É–π–Ω—è',"12",'123']
		name = file[2]	
		directory_clothes = file[1]
		text_clothes = f'{name}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {price}G\n{file[5]}'
		new_glasses = None
		new_body = None
		new_hair  = directory_clothes

	elif category == 'home_Moscow':
		global position_home_Moscow
		#files = [x for x in os.listdir(f'skin/shop_home/{category}') if category in x]
		files = db.items_base_data(category)
		file = files[position_home_Moscow[message.from_user.id]]
		if position_home_Moscow[message.from_user.id] > len(files)-1 or position_home_Moscow[message.from_user.id] < -(len(files)-1):
			position_home_Moscow[message.from_user.id] = 0
		#ph = open(f'skin/shop_home/{category}/{files[position_home_Moscow[message.from_user.id]]}','rb')
		ph = open(f'skin{file[1]}.png','rb')
		#price =(files[position_home_Moscow[message.from_user.id]].split('('))[1].split(')')[0]
		price = file[3]
		#name = text[position_home_Moscow[message.from_user.id]].split('\n')[0]
		name = file[2]	
		#directory_clothes = files[position_home_Moscow[message.from_user.id]][:-4]
		directory_clothes = file[1]
		#text_clothes = text[position_home_Moscow[message.from_user.id]]
		text_clothes = f'{name}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {price}G\n{file[5]}'
		new_glasses = None
		new_body = None
		#backround  = f'shop_home/{category}/{directory_clothes}'
		backround = directory_clothes


	elif category == 'home_SPB':
		global position_home_SPB
		files = db.items_base_data(category)
		file = files[position_home_SPB[message.from_user.id]]	
		if position_home_SPB[message.from_user.id] > len(files)-1 or position_home_SPB[message.from_user.id] < -(len(files)-1):
			position_home_SPB[message.from_user.id] = 0
		ph = open(f'skin{file[1]}.png','rb')
		price = file[3]
		name = file[2]	
		directory_clothes = file[1]
		text_clothes = f'{name}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {price}G\n{file[5]}'
		new_glasses = None
		new_body = None
		backround = directory_clothes

	elif category == 'home_Sochi':
		global position_home_Sochi
		files = db.items_base_data(category)
		file = files[position_home_Sochi[message.from_user.id]]
		if position_home_Sochi[message.from_user.id] > len(files)-1 or position_home_Sochi[message.from_user.id] < -(len(files)-1):
			position_home_Sochi[message.from_user.id] = 0
		ph = open(f'skin{file[1]}.png','rb')
		price = file[3]
		name = file[2]	
		directory_clothes = file[1]
		text_clothes = f'{name}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {price}G\n{file[5]}'
		new_glasses = None
		new_body = None
		backround = directory_clothes		
	kb = InlineKeyboardMarkup().row(InlineKeyboardButton('‚¨Ö',callback_data = f'scroll_clothes_ back {category}')\
		,InlineKeyboardButton('–ö—É–ø–∏—Ç—å',callback_data =f'buy_clothes {category},{name},{price}')\
		,InlineKeyboardButton('‚û°',callback_data = f'scroll_clothes_ next {category}'))\
	.add(InlineKeyboardButton('–ù–∞–∑–∞–¥',callback_data = f'exit_clothes_type {category}'))
	#new_glasses = f'shop/{category}/{directory_clothes}
	await bot.send_photo(message.from_user.id,charecter_img(message.from_user.id,new_glasses = new_glasses,new_body = new_body,backround = backround,new_hair = new_hair),text_clothes,reply_markup = kb)

async def scroll_clothes(callback:types.CallbackQuery):
	data = (((callback['data'].replace('scroll_clothes_ ','')).split()))
	way,type_clothes= data[0],data[1]
	if type_clothes == 'glasses':
		global position_glasses
		if way == 'next':
			position_glasses[callback.from_user.id] += 1
		elif way == 'back':
			position_glasses[callback.from_user.id] -= 1
		await callback.message.delete()
		await show_glasses(callback,category = 'glasses')
	elif type_clothes == 't-shirt':
		global position_Tshirt
		if way == 'next':
			position_Tshirt[callback.from_user.id] += 1
		elif way == 'back':
			position_Tshirt[callback.from_user.id] -= 1
		await callback.message.delete()
		await show_glasses(callback,category = 't-shirt')

	elif type_clothes == 'hoody':
		global position_hoody
		if way == 'next':
			position_hoody[callback.from_user.id] += 1
		elif way == 'back':
			position_hoody[callback.from_user.id] -= 1
		await callback.message.delete()
		await show_glasses(callback,category = 'hoody')

	elif type_clothes == 'SPB_barbershop':
		global position_SPB_barbershop
		if way == 'next':
			position_SPB_barbershop[callback.from_user.id] += 1
		elif way == 'back':
			position_SPB_barbershop[callback.from_user.id] -= 1
		await callback.message.delete()
		await show_glasses(callback,category = 'SPB_barbershop')

	elif type_clothes == 'home_Moscow':
		global position_home_Moscow
		if way == 'next':
			position_home_Moscow[callback.from_user.id] += 1
		elif way == 'back':
			position_home_Moscow[callback.from_user.id] -= 1
		await callback.message.delete()
		await show_glasses(callback,category = 'home_Moscow')

	elif type_clothes == 'home_SPB':
		global position_home_SPB
		if way == 'next':
			position_home_SPB[callback.from_user.id] += 1
		elif way == 'back':
			position_home_SPB[callback.from_user.id] -= 1
		await callback.message.delete()
		await show_glasses(callback,category = 'home_SPB')

	elif type_clothes == 'home_Sochi':
		global position_home_Sochi
		if way == 'next':
			position_home_Sochi[callback.from_user.id] += 1
		elif way == 'back':
			position_home_Sochi[callback.from_user.id] -= 1
		await callback.message.delete()
		await show_glasses(callback,category = 'home_Sochi')
async def buy_clothes(callback:types.CallbackQuery):
	await callback.message.delete()
	data = (callback['data'].replace('buy_clothes ','')).split(',')
	user_data = db.about_user(callback.from_user.id)
	category,name,price = data
	if category == 'glasses':
		data_pos = 14

	elif category == 'SPB_barbershop':
		data_pos = 4
	elif category in ['t-shirt','hoody']:
		data_pos = 13
	elif 'home' in category:
		if 'Moscow' in category:
			data_pos = 20
		elif 'SPB' in category:
			data_pos = 21
		elif 'Sochi' in category:
			data_pos = 22

	cur_item = user_data[0][data_pos]
	if cur_item == None or data_pos == 4:#–ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å –≤ —ç—Ç–æ–º —Å–ª–æ—Ç–µ —á—Ç–æ —Ç–æ
		text_msg = f'–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å {name}\n–ó–∞ {price}G?'
		cur_item_price = 0
	elif data_pos in [14,13]:#–ï—Å–ª–∏ —ç—Ç–æ –æ–¥–µ–∂–¥–∞
		cur_item_price =(cur_item.split('('))[1].split(')')[0]
		cur_item_price = round(int(cur_item_price)/2)
		text_msg = f'–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å {name}\n–ó–∞ {price}G?\n–í–ù–ò–ú–ê–ù–ò–ï\n–ù–∞ –≤–∞—Å —É–∂–µ –Ω–∞–¥–µ—Ç–∞ –ø–æ—Ö–æ–∂–∞—è –æ–¥–µ–∂–¥–∞, –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –æ–Ω–∞ –±—É–¥–µ—Ç –ø—Ä–æ–¥–∞–Ω–∞ –∑–∞ 50% –æ—Ç —Å–æ–≤–µ–π —Ü–µ–Ω—ã!\n–í—ã –ø—Ä–æ–¥–∞–¥–∏—Ç–µ —Ç–µ–∫—É—â—É—é –≤–µ—â—å –∑–∞ {cur_item_price}G'
	elif data_pos in [20,21,22] :#–ï—Å–ª–∏ —ç—Ç–æ –¥–æ–º
		cur_item_price =(cur_item.split('('))[1].split(')')[0]
		cur_item_price = round(int(cur_item_price)/2)
		my_town = user_data[6]
		#####################
		if my_town == '–ú–æ—Å–∫–≤–∞':#–ú–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ –∫–∞–∫–æ–π –≥–æ—Ä–æ–¥
			my_town = 'Moscow'
		if my_town == '–ü–∏—Ç–µ—Ä':
			my_town = 'SPB'
		if my_town == '–°–æ—á–∏':
			my_town = 'Sochi'
		#####################	
		if my_town in cur_item:
			#if my_town in cur_item:
			text_msg = f'–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å {name}\n–ó–∞ {price}G?\n–í–ù–ò–ú–ê–ù–ò–ï\n–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ–º –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ, –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –æ–Ω –±—É–¥–µ—Ç –ø—Ä–æ–¥–∞–Ω –∑–∞ 50% –æ—Ç —Å–æ–≤–µ–π —Ü–µ–Ω—ã!\n–í—ã –ø—Ä–æ–¥–∞–¥–∏—Ç–µ –µ–≥–æ –∑–∞ {cur_item_price}G'		
			#else:
			#	text_msg = f'–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å {name}\n–ó–∞ {price}G?'
			#	cur_item_price = 0
		else:
			await bot.send_message (callback.from_user.id,'–≠—Ç–æ–≥–æ –Ω–µ—Ç –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ')	
	await bot.send_message(callback.from_user.id,text_msg,reply_markup =InlineKeyboardMarkup()\
		.add(InlineKeyboardButton(text = '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É',callback_data = f'apply_bay_clothes {category},{name},{price}'))\
		.add(InlineKeyboardButton(text = '–û—Ç–º–µ–Ω–∞',callback_data = f'cancel_bay_clothes {category}')))

async def apply_bay_clothes(callback:types.CallbackQuery):
	await callback.message.delete()
	data = (callback['data'].replace('apply_bay_clothes ','')).split(',')
	category,name,price = data
	slot = category
	user_data = db.about_user(callback.from_user.id)[0]
	if 'home' in category:
		dir_bay = 'shop_home'
	elif category =='SPB_barbershop':
		dir_bay = 'barbershop'
	else:
		dir_bay = 'shop'
	user_gold = db.user_gold(callback.from_user.id)
	files = db.items_base_data(category)
	if user_gold>=int(price):
		if category == 'glasses':
			global position_glasses
			data_pos = 14
			pos_file = position_glasses[callback.from_user.id]

		elif category == 'SPB_barbershop':
			global position_SPB_barbershop
			data_pos = 4
			pos_file = position_SPB_barbershop[callback.from_user.id]
			slot = 'hairstyle'
		elif category in ['t-shirt','hoody']:
			slot = 'body'
			data_pos = 13
			if category == 't-shirt':
				global position_Tshirt
				pos_file = position_Tshirt[callback.from_user.id]
			else:
				global position_hoody
				pos_file = position_hoody[callback.from_user.id]
		elif 'home' in category:
			slot = category
			if 'Moscow' in category:
				global position_home_Moscow
				pos_file = position_home_Moscow[callback.from_user.id]				
				data_pos = 20
			elif 'SPB' in category:
				global position_home_SPB
				pos_file = position_home_SPB[callback.from_user.id]	
				data_pos = 21
			elif 'Sochi' in category:
				global position_home_Sochi
				pos_file = position_home_Sochi[callback.from_user.id]	
				data_pos = 22
		if category != 'SPB_barbershop':
			cur_item = user_data[data_pos]
			if cur_item != None:
				cur_item_price =(cur_item.split('('))[1].split(')')[0]
				cur_item_price = int(cur_item_price)/2
				db.set_gold(callback.from_user.id, user_gold+int(cur_item_price))#–¥–∞–µ–º –¥–µ–Ω—å–≥–∏ –∑–∞ —Å—Ç–∞—Ä—É—é –≤–µ—â—å –µ—Å–ª–∏ –µ—Å—Ç—å
		db.set_user_data(callback.from_user.id,slot,files[pos_file][1][1:])#–û—Ç–¥–∞–µ–º –≤–µ—â—å
		db.set_gold(callback.from_user.id, user_gold-int(price))#–±–µ—Ä–µ–º –ø–ª–∞—Ç—É –∑–∞ –≤–µ—â—å
		await bot.send_message(callback.from_user.id,f"–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ {name}\n–° –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ —Å–ø–∏—Å–∞–Ω–æ {price}G!\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!")
		if user_data[23] == 1:
			db.set_user_data(callback.from_user.id,'Level_task',2)
			db.set_user_data(callback.from_user.id,'gold',(user_gold-int(price))+1000)
			db.set_user_data(callback.from_user.id,'can_job',2)
			await bot.send_message(callback.from_user.id,"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –≤—ã–ø–æ–ª–Ω–∏–ª –≤—Ç–æ—Ä–æ–µ –∑–∞–¥–∞–Ω–∏–µ!\n–¢–≤–æ—è –Ω–∞–≥—Ä–∞–¥–∞\n1. 1000 –∑–æ–ª–æ—Ç–∞ü•á\n2.–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –Ω–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞!\n\n–ü–æ—Ä–∞–±–æ—Ç–∞–π –Ω–∞ –Ω–æ–≤–æ–π —Ä–∞–±–æ—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ")

		await show_glasses(callback,category)
	else:
		await bot.send_message(callback.from_user.id,f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞(\n–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {int(price)-user_gold} G")
		await show_glasses(callback,category)


async def cancel_bay_clothes(callback:types.CallbackQuery):
	await callback.message.delete()
	data = callback['data'].replace('cancel_bay_clothes ','')
	if 'home' in data:
		await commands_start(callback)
	else:
		await show_glasses(callback,category = data)



async def exit_clothes_type(callback:types.CallbackQuery):
	data = callback['data'].replace("exit_clothes_type ",'')
	await callback.message.delete()
	if data in ['glasses','t-shirt','hoody']:
		await Moscow_shop(callback)
	elif 'home' in data or data == 'SPB_barbershop':
		await commands_start(callback)

	if data == 'glasses':#–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑ –∫–∞–∫–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –≤—ã—Ö–æ–¥–∏–º
		global position_glasses
		poz_item = position_glasses
	elif data == 't-shirt':
		global position_Tshirt
		poz_item = position_Tshirt
	elif data == 'hoody':
		global position_hoody
		poz_item = position_hoody
	elif data == 'SBP_barbershop':
		global position_SBP_barbershop
		poz_item = position_SBP_barbershop
	elif data == 'home_Moscow':
		global position_home_Moscow
		poz_item = position_home_Moscow
	elif data == 'home_SPB':		
		global position_home_SPB
		poz_item = position_home_SPB
	elif data == 'home_Sochi':		
		global position_home_Sochi
		poz_item = position_home_Sochi
	try:#–ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —É–∂–µ –Ω–µ –Ω—É–∂–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é(—Å—á–µ—Ç—á–∏–∫ –ø–æ–∑–∏—Ü–∏–∏)
		del poz_item[callback.from_user.id]
	except:
		pass

class home_menu_button(StatesGroup):
	button = State()

async def home_menu(message:types.Message):
	user_data = db.about_user(message.from_user.id)[0]
	if user_data[6] == '–ú–æ—Å–∫–≤–∞' or user_data[6] == 0 :
		home_slot = 20
	elif user_data[6] == '–ü–∏—Ç–µ—Ä':
		home_slot = 21
	elif user_data[6] == '–°–æ—á–∏':
		home_slot = 22
	#–ü—Ä–æ–≤–µ—Ä–∏–ª–∏ –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∏–≥—Ä–æ–∫ —á—Ç–æ –±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ª–æ—Ç –¥–æ–º–∞ –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ

	if user_data[7] == 0:#–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏–≥—Ä–æ–∫—É –∏ –∑–∞—Ö–æ–¥–∏—Ç –ª–∏ –æ–Ω —Å—é–¥–∞ –≤–ø–µ—Ä–≤—ã–µ
		await bot.send_message(message.from_user.id,'–¢–µ–±–µ —ç—Ç–æ –µ—â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ!')
	elif user_data[7] == 1:
		await bot.send_message(message.from_user.id,f'üè†{user_data[1]} –ø–æ–∑–¥—Ä–∞–≤–ª—è—é—Ç —Ç–µ–±—è!–¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–æ–º–∞!–¢—É—Ç —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–¥—ã—Ö–∞—Ç—å –∏ —Ö—Ä–∞–Ω–∏—Ç—å –≤–µ—â–∏ –≤ —à–∫–∞—Ñ—É!\n–ù–∞–∂–º–∏ –µ—â–µ —Ä–∞–∑ –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–º üè†" —á—Ç–æ –±—ã –ø–æ–ø–∞—Å—Ç—å –≤ –º–µ–Ω—é –¥–æ–º–æ–≤')
		db.set_user_data(message.from_user.id,'can_home',None)
		db.set_user_data(message.from_user.id,'Level_task',5)	
	elif user_data[home_slot] == None:#–ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –¥–æ–º –∏ –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫—É–ø–∏—Ç—å
		text = '–£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –¥–æ–º–∞ –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ, –≤–æ—Ç –¥–æ–º–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ'
		if user_data[23] == 5:
			text+='\n–ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —Å–µ–±–µ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å, –ª–∏–±–æ –≤—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —Ç–∞–º –¥–ª—è —Ç–µ–±—è –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ'
		await bot.send_message(message.from_user.id,text)
		if user_data[6] == '–ú–æ—Å–∫–≤–∞':
			global position_home_Moscow
			position_home_Moscow = {message.from_user.id:0}
			town = 'home_Moscow'
		elif user_data[6] == '–ü–∏—Ç–µ—Ä':
			global position_home_SPB
			position_home_SPB = {message.from_user.id:0}
			town = 'home_SPB'
		elif user_data[6] == '–°–æ—á–∏':
			global position_home_Sochi
			position_home_Sochi = {message.from_user.id:0}
			town = 'home_Sochi'	
		await show_glasses(message, town)
	else:
		home_name = (user_data[home_slot].split('/')[-1]).split('_')[0]
		kb = ReplyKeyboardMarkup(resize_keyboard=True)\
		.row(KeyboardButton("–ì–∞—Ä–¥–µ—Ä–æ–±"))\
		.row(KeyboardButton("–í—ã–π—Ç–∏"),KeyboardButton("–ö—É–ø–∏—Ç—å –¥–æ–º"))
		await home_menu_button.button.set()
		await bot.send_photo(message.from_user.id,charecter_img(message.from_user.id, backround = user_data[home_slot]),f'{user_data[1]}, —Ç—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ —Å–≤–æ–µ–º –¥–æ–º–µ "{home_name}"',reply_markup = kb)

class chenge_wardrobe_state(StatesGroup):
	chenge = State()
async def wardrobe(message:types.Message):
	user_data =db.about_user(message.from_user.id)[0]
	if db.wardrobe_exists(message.from_user.id):
		user_wardrobe = db.about_user_wardrobe(message.from_user.id)[0]
		new_glasses = 'None'	#–°—Ç–∞–≤–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –æ—á–∫–æ–≤ –Ω–∞ –º–∞–Ω–µ–∫–µ–Ω–µ –∏–∑–Ω–æ—á–∞–ª—å–Ω–æ –ø—É—Å—Ç–æ–µ
		new_body = 'None'
		body_in_slot = '–ü—É—Å—Ç–æ'
		skin = 'wardrobe_glasses' # –ê–Ω–∞–ª–∞–≥–∏—á–Ω–æ —Å –≤–µ—Ä—Ö–Ω–µ–π –æ–¥–µ–∂–¥–æ, –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤–µ—Ä—Ö–Ω–µ–π –æ–¥–µ–∂–¥—ã –∏ —Ç–∏–ø–æ–º –º–∞–Ω–µ–∫–µ–Ω–∞
		kb = ReplyKeyboardMarkup(resize_keyboard=True)#–°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–∫–∞ —á—Ç–æ —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
		if user_data[6] =="–ú–æ—Å–∫–≤–∞":#–£–∑–Ω–∞–µ–º –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –ø–µ—Ä—Å–æ–Ω–∞–∂ —á—Ç–æ –±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç —Ñ–æ–Ω
			back_poz = 20
		elif user_data[6] =="–ü–∏—Ç–µ—Ä":
			back_poz = 21
		elif user_data[6] == "–°–æ—á–∏":
			back_poz = 22

		if user_wardrobe[2] == None:#–ï—Å–ª–∏ –≤ —Å–ª–æ—Ç–µ –æ–¥–µ–∂–¥—ã –ø—É—Å—Ç–æ
			kb.row(KeyboardButton('–ü–æ–ª–æ–∂–∏—Ç—å –æ–¥–µ–∂–¥—Éüëï'))
		elif user_wardrobe[2] != None:
			new_body = user_wardrobe[2]
			body_in_slot = db.items_dir_to_name(user_wardrobe[2])
			kb.row(KeyboardButton('–ó–∞–±—Ä–∞—Ç—å –æ–¥–µ–∂–¥—Éüëï')) 
			
		if user_wardrobe[3] == 0:#–£–∑–Ω–∞–µ–º –æ—Ç–∫—Ä—ã—Ç –ª–∏ —Ä–∞–∑–¥–µ–ª –æ—á–∫–æ–≤
			new_glasses = 'None'
			glasses_in_slot = 'üîí–ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ûüîí'
			skin = 'wardrobe_body'
			kb.insert(KeyboardButton('üîí–†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–¢–¨ –°–õ–û–¢ –î–õ–Ø –û–ß–ö–û–íüîí'))
		elif user_wardrobe[3] == None:#–ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª –µ—Å—Ç—å –Ω–æ —Ç–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ—Ç
			kb.insert(KeyboardButton('–ü–æ–ª–æ–∂–∏—Ç—å –æ—á–∫–∏üëì'))#–î–æ–±–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
			glasses_in_slot = '–ü—É—Å—Ç–æ'
		else:#–ï—Å–ª–∏ —Å—Ç–æ—è—Ç –∫–∞–∫–∏–µ —Ç–æ –æ—á–∫–∏
			kb.insert(KeyboardButton('–ó–∞–±—Ä–∞—Ç—å –æ—á–∫–∏üëì'))#–î–æ–±–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
			new_glasses = user_wardrobe[3]
			glasses_in_slot = db.items_dir_to_name(user_wardrobe[3])
		kb.add(KeyboardButton('–ù–∞–∑–∞–¥'))
		wardrobe_ph = charecter_img(message.from_user.id,skin = skin, backround = user_data[back_poz],new_body = new_body,new_hair = 'None',new_glasses = new_glasses)#–°–æ–∑–¥–∞–µ–º —Ñ–æ—Ç–æ –º–∞–Ω–µ–∫–µ–Ω–∞
		await bot.send_photo(message.from_user.id,wardrobe_ph,f'–≠—Ç–æ —Ç–≤–æ–π –≥–∞—Ä–¥–µ—Ä–æ–±\nüëï–í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞:{body_in_slot}\nüëì–û—á–∫–∏:{glasses_in_slot}',reply_markup = kb)
		await chenge_wardrobe_state.chenge.set()
	else:
		kb = InlineKeyboardMarkup()\
		.row(InlineKeyboardButton(text = '–ö—É–ø–∏—Ç—å', callback_data = 'bay_wardrobe body'),InlineKeyboardButton(text ='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',callback_data = 'back_main_menu'))
		await bot.send_message(message.from_user.id,f'{user_data[1]},—É —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –≥–∞—Ä–¥–µ—Ä–æ–±–∞,—Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å –µ–≥–æ –∑–∞ 200 000 G?\n–í –Ω–µ–º —É–∂–µ –±—É–¥–µ—Ç —Å–ª–æ—Ç –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–π –æ–¥–µ–∂–¥—ã, –Ω–æ —Å–ª–æ—Ç –¥–ª—è –æ—á–∫–æ–≤ –Ω—É–∂–Ω–æ –¥–æ–∫—É–ø–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ',reply_markup = kb)	

async def chenge_wardrobe(message:types.Message,state:FSMContext):
	user_wardrobe = db.about_user_wardrobe(message.from_user.id)[0]
	user_data = db.about_user(message.from_user.id)[0]
	if message.text == '–ù–∞–∑–∞–¥':
		await state.finish()
		await home_menu(message)
	elif message.text in ('–ü–æ–ª–æ–∂–∏—Ç—å –æ–¥–µ–∂–¥—Éüëï','–ó–∞–±—Ä–∞—Ç—å –æ–¥–µ–∂–¥—Éüëï'):
		if message.text == '–ü–æ–ª–æ–∂–∏—Ç—å –æ–¥–µ–∂–¥—Éüëï':
			db.set_user_data(message.from_user.id,'body',None)
			db.set_user_wardrobe(message.from_user.id,'body',user_data[13])
			await bot.send_message(message.from_user.id,'üëï–í—ã –ø–æ–ª–æ–∂–∏–ª–∏ —Å–≤–æ—é –æ–¥–µ–∂–¥—É –≤ –≥–∞—Ä–¥–µ—Ä–æ–±')
		elif message.text == '–ó–∞–±—Ä–∞—Ç—å –æ–¥–µ–∂–¥—Éüëï':
			db.set_user_data(message.from_user.id,'body',user_wardrobe[2])
			db.set_user_wardrobe(message.from_user.id,'body',user_data[13])			
			await bot.send_message(message.from_user.id,'üëï–í—ã –∑–∞–±—Ä–∞–ª–∏ –æ–¥–µ–∂–¥—É –∏–∑ –≥–∞—Ä–¥–µ—Ä–æ–±–∞')
		await wardrobe(message)
		#await state.finish()


	elif message.text in('–ü–æ–ª–æ–∂–∏—Ç—å –æ—á–∫–∏üëì','–ó–∞–±—Ä–∞—Ç—å –æ—á–∫–∏üëì'):
		if user_wardrobe[3]==0:
			await bot.send_message(message.from_user.id,'–í–∞–º —ç—Ç–æ –µ—â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ!')
		elif message.text == '–ü–æ–ª–æ–∂–∏—Ç—å –æ—á–∫–∏üëì':
			db.set_user_data(message.from_user.id,'glasses',None)
			db.set_user_wardrobe(message.from_user.id,'glasses',user_data[14])
			await bot.send_message(message.from_user.id,'–í—ã –ø–æ–ª–æ–∂–∏–ª–∏ —Å–≤–æ–∏ –æ—á–∫–∏ –≤ –≥–∞—Ä–¥–µ—Ä–æ–±')
		elif message.text == '–ó–∞–±—Ä–∞—Ç—å –æ—á–∫–∏üëì':
			db.set_user_data(message.from_user.id,'glasses',user_wardrobe[3])
			db.set_user_wardrobe(message.from_user.id,'glasses',user_data[14])		
			await bot.send_message(message.from_user.id,'–í—ã –∑–∞–±—Ä–∞–ª–∏ –æ—á–∫–∏ –∏–∑ –≥–∞—Ä–¥–µ—Ä–æ–±–∞')
		await wardrobe(message)
		#await state.finish()
	elif message.text == 'üîí–†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–¢–¨ –°–õ–û–¢ –î–õ–Ø –û–ß–ö–û–íüîí':
		await bay_wardrobe_glasses(message)
		await state.finish()
	else:
		await bot.send_message(message.from_user.id,'–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!')

async def bay_wardrobe(callback:types.CallbackQuery):
	await callback.message.delete()
	user_data =db.about_user(callback.from_user.id)[0]
	if db.wardrobe_exists(callback.from_user.id):
		await bot.send_message(callback.from_user.id,f'{user_data[1]}, —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –≥–∞—Ä–¥–µ—Ä–æ–±!')
		await commands_start(callback.from_user.id)
	else:
		kb = InlineKeyboardMarkup().row(InlineKeyboardButton(text = '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',callback_data = 'apply_bay_wardrobe body'),InlineKeyboardButton(text = '–û—Ç–º–µ–Ω–∞',callback_data = 'back_main_menu'))
		await bot.send_message(callback.from_user.id,f'{user_data[1]}, –≤—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –≥–∞—Ä–¥–µ—Ä–æ–± –∑–∞ 200 000G?',reply_markup = kb)
	

async def bay_wardrobe_glasses(message:types.Message):
	user_data =db.about_user(message.from_user.id)[0]
	user_wardrobe = db.about_user_wardrobe(message.from_user.id)[0]
	if user_wardrobe[3]==0:
		kb = InlineKeyboardMarkup().row(InlineKeyboardButton(text = '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',callback_data = 'apply_bay_wardrobe glasses'),InlineKeyboardButton(text = '–û—Ç–º–µ–Ω–∞',callback_data = 'back_main_menu'))
		await bot.send_message(message.from_user.id,f'{user_data[1]}, –≤—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç –¥–ª—è –æ—á–∫–æ–≤ –∑–∞ 500 000G?',reply_markup = kb)			
	else:
		await bot.send_message(message.from_user.id,f'{user_data[1]}, —É —Ç–µ–±—è —É–∂–µ –æ—Ç–∫—Ä—ã—Ç —Å–ª–æ—Ç –¥–ª—è –æ—á–∫–æ–≤!')
		await commands_start(message.from_user.id)





async def apply_bay_wardrobe(callback:types.CallbackQuery):
	await callback.message.delete()
	user_data =db.about_user(callback.from_user.id)[0]
	if 'body' in callback['data']:
		if user_data[12] >= 200000:
			db.create_wardrobe(callback.from_user.id)
			db.set_gold(callback.from_user.id,user_data[12]-200000)
			wardrobe_ph = open("skin/wardrobe_body.png",'rb')
			await bot.send_photo(callback.from_user.id,wardrobe_ph,f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é {user_data[1]}, —Ç—ã –∫—É–ø–∏–ª –≥–∞—Ä–¥–µ—Ä–æ–±, –∏ —Ç–µ–±–µ —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω —Å–ª–æ—Ç –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–π –æ–¥–µ–∂–¥—ã\n–≠—Ç–æ—Ç –≥–∞—Ä–¥–µ—Ä–æ–± —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –ª—é–±–æ–º –¥–æ–º–µ, –ª—é–±–æ–≥–æ –≥–æ—Ä–æ–¥–∞!\n–û–¥–Ω—É —à–º–æ—Ç–∫—É —Ç—ã –º–æ–∂–µ—à—å –Ω–æ—Å–∏—Ç—å –Ω–∞ —Å–µ–±–µ –∞ –¥—Ä—É–≥—É—é —Ö—Ä–∞–Ω–∏—Ç—å –≤ —à–∫–∞—Ñ—É!)')
			await home_menu(callback)
		else:
			await bot.send_message(callback.from_user.id,'–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞!')
			await home_menu(callback)
	elif 'glasses' in callback['data']:
		if user_data[12] >= 500000:
			db.set_user_wardrobe(callback.from_user.id,'glasses',None)
			db.set_gold(callback.from_user.id,user_data[12]-500000)
			wardrobe_ph = open("skin/wardrobe_glasses.png",'rb')
			await bot.send_photo(callback.from_user.id,wardrobe_ph,f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é {user_data[1]}, —Ç—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª —Å–ª–æ—Ç –¥–ª—è –æ—á–∫–æ–≤!')
			await home_menu(callback)
		else:
			await bot.send_message(callback.from_user.id,'–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞!')
			await home_menu(callback)


async def back_main_menu_callback(callback:types.CallbackQuery):
	await callback.message.delete()
	await commands_start(callback)

async def home_buttons(message:types.Message,state:FSMContext):
	if message.text == "–í—ã–π—Ç–∏":
		await state.finish()
		await commands_start(message)
	else:
		if message.text == "–ì–∞—Ä–¥–µ—Ä–æ–±":
			await state.finish()
			await wardrobe(message)
		elif message.text == "–ö—É–ø–∏—Ç—å –¥–æ–º":
			await state.finish()
			user_data = db.about_user(message.from_user.id)[0]
			if user_data[6] == '–ú–æ—Å–∫–≤–∞':#–£–∑–Ω–∞–µ–º –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Å–µ–π—á–∞—Å –∏–≥—Ä–æ–∫ –∏ —Å–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞, –∑–∞—Ç–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–∞—Ç–∞–ª–æ–≥ –¥–æ–º–æ–≤ –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ
				global position_home_Moscow
				position_home_Moscow = {message.from_user.id:0}
				town = 'home_Moscow'
			elif user_data[6] == '–ü–∏—Ç–µ—Ä':
				global position_home_SPB
				position_home_SPB = {message.from_user.id:0}
				town = 'home_SPB'
			elif user_data[6] == '–°–æ—á–∏':
				global position_home_Sochi
				position_home_Sochi = {message.from_user.id:0}
				town = 'home_Sochi'
			await bot.send_message(message.from_user.id,'–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–º–æ–≤ –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å',reply_markup =types.ReplyKeyboardRemove())
			await show_glasses(message, town)
		else:
			await bot.send_message(message.from_user.id,'–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!')


class bussines_menu_FSM(StatesGroup):
	menu = State()
	storage = State()
	catalog = State(0)

async def bussines(message:types.Message,state:FSMContext):
	user_data = db.about_user(message.from_user.id)[0]
	user_bussines = user_data[8]
	if user_bussines == 0:
		await bot.send_message(message.from_user.id,"–≠—Ç–æ —Ç–µ–±–µ –µ—â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ")
	elif user_bussines == 1:
		await bot.send_message(message.from_user.id,"–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–∞.–î–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º —Ç–µ–±–µ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å")
		await bussines_menu_FSM.catalog.set()
		async with state.proxy() as data:
			data['catalog'] = 0
		await bussines_catalog(message,state)			
	elif user_bussines != 1:
		bussines_data = db.bussiness_data(user_bussines)#–ß–∏—Ç–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã, –æ–ø–∏—Å–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å—Å–∞ –∫–æ—Ç–æ—Ä—ã–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		bussines_processes = db.business_processes(message.from_user.id)# –ó–∞ —Ç–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—Ç–µ —ç—Ç–æ–≥–æ –±–∏–∑–Ω–µ—Å—Å–∞

		start_time =datetime.datetime.strptime(bussines_processes["start_time"], "%Y-%m-%d %H:%M:%S.%f")#–°—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
		now = datetime.datetime.strptime(str(datetime.datetime.now()), "%Y-%m-%d %H:%M:%S.%f")#–í—Ä–µ–º—è —Å–µ–π—á–∞—Å
		em_t = datetime.datetime.strptime(bussines_processes['storage_empty_time'], "%Y-%m-%d %H:%M:%S.%f")#–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è –º–∞—Ç–µ—Ä–∏–∞–ª—ã
		delta_to_empty = (em_t-start_time).total_seconds() #–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –ø—Ä–æ—Ä–∞–±–æ—Ç–∞—Ç—å –±–∏–∑–Ω–µ—Å—Å
			
		if now > em_t : #–ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–æ—Å—å –ª–∏ –µ—â–µ —á—Ç–æ —Ç–æ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –µ—Å–ª–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, —Ç–æ –±–∏–∑–Ω–µ—Å—Å –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–ª –º–∞–∫—Å–∏–º—É–º –≤—Ä–µ–º–µ–Ω–∏, —Å–∫–æ–ª—å–∫–æ –º–æ–≥
			if delta_to_empty < 0:
				delta = 0
			else:
				delta = delta_to_empty
			cur_storage = 0

		elif start_time < now < em_t:#–ï—Å–ª–∏ –∂–µ –æ—Å—Ç–∞–ª–æ—Å—å, —Ç–æ —É–∑–Ω–∞–µ–º —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–ª, –æ—Ç –∑–∞–∫—É–ø–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º –¥–æ –¥–∞–Ω–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞
			delta = int((now-start_time).total_seconds())
			cur_storage = (((bussines_processes["storage"]*60) - delta)/60) #–°—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
			if cur_storage < 0:
				cur_storage = 0

		net_income = round((delta*bussines_data["net_income"])/60) #–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å
		on_account = bussines_processes["on_account"] + net_income #–ù–∞ —Å—á–µ—Ç—É

		if bussines_processes['storage'] > 0:
			##########–ó–∞–Ω–æ—Å–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–º—ã—Å–ª#############
			#db.set_business_p_data(message.from_user.id,"storage_empty_time",datetime.datetime.now()+datetime.timedelta(minutes =bussines_processes["storage"] ))
			db.set_business_p_data(message.from_user.id,"storage",cur_storage)
			db.set_business_p_data(message.from_user.id,"on_account",on_account)
			if now < em_t:
				db.set_business_p_data(message.from_user.id,"start_time",now)
		else:
			on_account = bussines_processes["on_account"] #–ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –≤–Ω–µ—Å–ª–∏
		#–î–∞–ª–µ–µ –¥–µ–ª–∞–µ–º —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
		bussines_text = f'{user_data[1]},—Ç—ã –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤–æ–∏–º –±–∏–∑–Ω–µ—Å–æ–º \n"{user_bussines}".\nüíµ –°—á–µ—Ç –±–∏–∑–Ω–µ—Å–∞:${on_account}\nüí∏ –í—ã—Ä—É—á–∫–∞:{bussines_data["income"]}$/–º–∏–Ω.\nüìà –î–æ—Ö–æ–¥: {bussines_data["net_income"]}$/–º–∏–Ω.\nüì¶ –°–∫–ª–∞–¥: {math.ceil(cur_storage)}/{bussines_data["storage"]}'			
		if cur_storage <= 0:
			bussines_text += ('\n–ë–∏–∑–Ω–µ—Å—Å –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∑–∞–∫—É–ø–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥!')
		kb = ReplyKeyboardMarkup(resize_keyboard = True)\
		.row(KeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å"),KeyboardButton("–°–Ω—è—Ç—å —Å–æ —Å—á–µ—Ç–∞"),KeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å–∫–ª–∞–¥"),KeyboardButton("–ö–∞—Ç–∞–ª–æ–≥"))\
		.add(KeyboardButton("–ù–∞–∑–∞–¥"))

		await bussines_menu_FSM.menu.set()
		with open(f'skin/business/{bussines_data["picture_dir"]}','rb') as picture:
			await bot.send_photo(message.from_user.id,picture,bussines_text,reply_markup = kb)
	else:
		await bot.send_message(message.from_user.id,f'{user_data[1]}, —Ç—ã –≤ –º–µ–Ω—é –±–∏–∑–Ω–µ—Å—Å–æ–≤!\n–ü–æ–∫–∞ —á—Ç–æ —É —Ç–µ–±—è –Ω–µ—Ç —Å–≤–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞, –¥–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º, –∫–∞–∫–∏–µ –±–∏–∑–Ω–µ—Å—Å—ã —Ç—ã –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å!')


count_b_cata = -1
async def bussines_menu(message:types.Message,state:FSMContext):
	if message.text == "–û–±–Ω–æ–≤–∏—Ç—å":
		await bussines(message,state)

	elif message.text == "–ù–∞–∑–∞–¥":
		await commands_start(message)
		await state.finish()

	elif message.text in ("–°–Ω—è—Ç—å —Å–æ —Å—á–µ—Ç–∞","–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å–∫–ª–∞–¥"):
		user_data = db.about_user(message.from_user.id)[0]
		b_account_data = db.business_processes(message.from_user.id)
		if message.text == "–°–Ω—è—Ç—å —Å–æ —Å—á–µ—Ç–∞":
			user_data = db.about_user(message.from_user.id)[0]
			b_account_data = db.business_processes(message.from_user.id)
			db.set_user_data(message.from_user.id,"gold",user_data[12]+b_account_data["on_account"])
			db.set_business_p_data(message.from_user.id,"on_account",0)	
			await bot.send_message(message.from_user.id,f"–í—ã —Å–Ω—è–ª–∏ —Å–æ —Å—á–µ—Ç–∞ –±–∏–∑–Ω–µ—Å–∞ {b_account_data['on_account']}ü•á")
			await bussines(message,state)
		elif message.text == "–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å–∫–ª–∞–¥":
			b_data = db.bussiness_data(user_data[8])
			free_place = b_data["storage"] - math.ceil(b_account_data["storage"])
			if free_place > 0:
				await state.finish()
				await bussines_menu_FSM.storage.set()
				kb = ReplyKeyboardMarkup(resize_keyboard = True)\
				.row(KeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"),KeyboardButton("–ù–∞–∑–∞–¥"))
				price = math.ceil(free_place*(b_data["net_income"]**0.5*2))
				async with state.proxy() as data:
					data['storage'] = price,user_data,b_account_data,b_data,free_place
				await bot.send_message(message.from_user.id,f'–ù–∞ —Å–∫–ª–∞–¥–µ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –µ—â–µ {free_place} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤–µ—Å—å —Å–∫–ª–∞–¥ –∑–∞ {price}',reply_markup = kb)
			else:
				await bot.send_message(message.from_user.id,f'–ù–∞ —Å–∫–ª–∞–¥–µ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞')
	elif message.text == "–ö–∞—Ç–∞–ª–æ–≥":
		await bot.send_message(message.from_user.id,"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥.–¢—É—Ç –≤—Å–µ –±–∏–∑–Ω–µ—Å—ã –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å!\n–î–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º —á—Ç–æ-–Ω–∏–±—É–¥—å)")
		await state.finish()
		await bussines_menu_FSM.catalog.set()
		async with state.proxy() as data:
			data['catalog'] = 0
		await bussines_catalog(message,state)

	else:
		await bot.send_message(message.from_user.id,'–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!')

async def bussines_catalog(message:types.Message,state = FSMContext):
	catalog = db.bussiness_data()
	async with state.proxy() as data:
		page = data['catalog']
		if page>=len(catalog) or page <= -len(catalog):
			data['catalog'] = page = 0 

	catalog = catalog[page]
	offer ={'bussines_id':catalog[0],'bussines_name':catalog[1],'income':catalog[2],'net_income':catalog[3],'storage':catalog[4],'description':catalog[5],'picture_dir':catalog[6],'price':catalog[7]}
	offer_text = f"{offer['bussines_name']}\n–í—ã—Ä—É—á–∫–∞:{offer['income']}\n–î–æ—Ö–æ–¥:{offer['net_income']}\n–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–∫–ª–∞–¥–∞:{offer['storage']}\n–û–ø–∏—Å–∞–Ω–∏–µ:{offer['description']}\n\n–¶–µ–Ω–∞:{offer['price']}ü•á"

	kb = ReplyKeyboardMarkup(resize_keyboard = True)\
	.row(KeyboardButton('‚¨ÖÔ∏è'),KeyboardButton('–ö—É–ø–∏—Ç—å'),KeyboardButton('‚û°Ô∏è'))\
	.add(KeyboardButton('–ù–∞–∑–∞–¥'))
	with open(f'skin/business/{offer["picture_dir"]}','rb') as picture:
		await bot.send_photo(message.from_user.id,picture,offer_text,reply_markup = kb)

async def bussines_catalog_way(message:types.Message,state = FSMContext):
	user_data = db.about_user(message.from_user.id)[0]

	if message.text == '‚û°Ô∏è':
		async with state.proxy() as data:
			data['catalog']+=1
		await bussines_catalog(message,state)
	elif message.text == '‚¨ÖÔ∏è':
		async with state.proxy() as data:
			data['catalog']-=1
		await bussines_catalog(message,state)
	elif message.text == '–ù–∞–∑–∞–¥':
		await state.finish()
		if user_data[8] == 1: #–ï—Å–ª–∏ –ø–µ—Ä–µ—à–µ–ª —Å –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é, —Ç—É–¥–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è
			await commands_start(message)
 
		else:
			await bussines(message,state)
			
	elif message.text == '–ö—É–ø–∏—Ç—å':
		async with state.proxy() as data:
			page = data['catalog']
		cur_business = db.bussiness_data()[page]
		if user_data[12] >= cur_business[7]:
			if user_data[8] == 1:
				db.create_business_p(message.from_user.id)
			db.set_business_p_data(message.from_user.id,'bussines_name',cur_business[1])
			db.set_business_p_data(message.from_user.id,'start_time',datetime.datetime.now())
			db.set_business_p_data(message.from_user.id,'storage_empty_time',datetime.datetime.now())
			db.set_business_p_data(message.from_user.id,'on_account',0)
			db.set_business_p_data(message.from_user.id,'storage',0)
			db.set_user_data(message.from_user.id,'can_bussines',cur_business[1])
			db.set_user_data(message.from_user.id,'gold',user_data[12]-int(cur_business[7]))
			await bot.send_message(message.from_user.id,f'C –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ —Å–ø–∏—Å–∞–Ω–Ω–æ {cur_business[7]} –∑–æ–ª–æ—Ç–∞ü•á\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—Å —Å –ø–æ–∫—É–ø–∫–æ–π –±–∏–∑–Ω–µ—Å–∞ "{cur_business[1]}"!\n–í–∞–º –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–∫–ª–∞–¥ –≤–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞, –∏ –æ–Ω –Ω–∞—á–Ω–µ—Ç –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –ø—Ä–∏–±—ã–ª—å!')
			await state.finish()
			await bussines(message,state)
		else:
			await bot.send_message(message.from_user.id,'–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ –Ω–∞ —Å—á–µ—Ç—É')


async def bussines_storage(message:types.Message,state:FSMContext):
	if message.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
		async with state.proxy() as data:
			price,user_data,b_account_data,b_data,free_place = data['storage']
			if user_data[12] >= price:
				now = datetime.datetime.now()
				db.set_user_data(message.from_user.id,"gold",user_data[12]-price)
				db.set_business_p_data(message.from_user.id,"storage",b_data["storage"])
				
				if now > datetime.datetime.strptime(b_account_data['storage_empty_time'], "%Y-%m-%d %H:%M:%S.%f"):
					db.set_business_p_data(message.from_user.id,"start_time", now)		
					db.set_business_p_data(message.from_user.id,"storage_empty_time",now+datetime.timedelta(minutes =b_data["storage"] ))
				else:
					db.set_business_p_data(message.from_user.id,"storage_empty_time",now+datetime.timedelta(minutes =free_place ))

				await bot.send_message(message.from_user.id,f'–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ —Å–∫–ª–∞–¥ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏, —Å –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ —Å–ø–∏—Å–∞–Ω–Ω–æ {price} –∑–æ–ª–æ—Ç–∞')
			else:
				await bot.send_message(message.from_user.id,f'–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞')
			await state.finish()
			await bussines(message,state)
	elif message.text == "–ù–∞–∑–∞–¥":
		await state.finish()
		await bussines(message,state)
	else:
		await bot.send_message(message.from_user.id,"–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏")





async def send_vladu(message:types.Message,state: FSMContext):
	await bot.send_message(812157716,message.text)
	await bot.send_message(message.from_user.id,f'–í–ª–∞–¥ –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ')

on_my_neck = 0

async def test_edit_button(message:types.Message):
	global on_my_neck
	#msg = await bot.send_message(message.from_user.id,f"–£ —Ç–µ–±—è –Ω–∞ —Å—á–µ—Ç—É {on_my_neck}")

	await bot.send_message(message.from_user.id,f"–£ —Ç–µ–±—è –Ω–∞ —Å—á–µ—Ç—É {on_my_neck}\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –µ—â–µ",reply_markup = InlineKeyboardMarkup().add(InlineKeyboardButton(text = "–ù–∞–∂–º–∏ –Ω–∞ –º–µ–Ω—è",callback_data = f"testEdit ")))
	
async def test_edit_button_callback(callback:types.CallbackQuery):
	global on_my_neck
	on_my_neck +=1
	await bot.edit_message_text(text = f"–£ —Ç–µ–±—è –Ω–∞ —Å—á–µ—Ç—É {on_my_neck}\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –µ—â–µ",chat_id = callback.message.chat.id ,message_id = callback.message.message_id,reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text = "–ù–∞–∂–º–∏ –Ω–∞ –º–µ–Ω—è",callback_data = f"testEdit ")))

def register_handlers_client(dp : Dispatcher):
	dp.register_message_handler(commands_start,commands=['start','help'])
	dp.register_message_handler(add_new_key,commands=['add_key_PASSWORD'])

	dp.register_message_handler(test_edit_button,Text(equals='–¢–µ—Å—Ç–∏–º —Ö—É–π–Ω—é'))
	dp.register_callback_query_handler(test_edit_button_callback,lambda x: x.data and x.data.startswith('testEdit '))


	dp.register_message_handler(main_menu,Text(equals='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è'))
	dp.register_message_handler(up_balance, Text(equals='–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å üí≥'))
	dp.register_message_handler(pizza_open_command, Text(equals='–ó–æ–ª–æ—Ç–æ ü•á'))
	dp.register_message_handler(pizza_place_command, Text(equals='–ü–æ—Å—á–∏—Ç–∞—Ç—å ü•á'))
	dp.register_message_handler(gold_games, Text(equals='–ö–∞–∑–∏–Ω–æ $'))
	dp.register_message_handler(up_my_gold, Text(equals='–ü–æ–ø–æ–ª–Ω–∏—Ç—å ü•á'))
	dp.register_message_handler(get_my_gold, Text(equals='–í—ã–≤–µ—Å—Ç–∏ ü•á'))
	dp.register_message_handler(reviews, Text(equals='–û—Ç–∑—ã–≤—ã üë•'))
	dp.register_message_handler(tech_help, Text(equals='–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞ üë§'))
	dp.register_message_handler(prifile,Text(equals='–ü—Ä–æ—Ñ–∏–ª—å üìù'))
	dp.register_message_handler(chests,Text(equals='–∫–µ–π—Å—ã üì¶'))
	dp.register_message_handler(other_staf,Text(equals='–î—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã üì¶'))
	dp.register_message_handler(show_my_turn,Text(equals='–û—á–µ—Ä–µ–¥—å üë§'))
	dp.register_callback_query_handler(balance_uper,lambda x: x.data and x.data.startswith('balance_uper_ '))
	#dp.register_message_handler(balance_uper,state=balance.need_balance)
	dp.register_message_handler(balance_uper_pick,state=balance.need_balance)
	dp.register_message_handler(gold_uper,state=balance_gold.need_balance)
	dp.register_message_handler(gold_geter,state=get_gold.need_get_gold)

	dp.register_message_handler(take_qvest,state=tech_qvest.qvest)
	dp.register_message_handler(count_gold,content_types=['photo'],state=schet_gold.my_gold)

	dp.register_message_handler(add_this_key,state=promo_add.key)

	dp.register_message_handler(count_gold_bet,state=bet_gold.my_bet)
	###########–ò–ù–õ–ê–ô–ù –ö–ù–û–ü–ö–ò###########################
	dp.register_callback_query_handler(help_for_1,text='help_1')
	dp.register_callback_query_handler(help_for_2,text='help_2')
	dp.register_callback_query_handler(help_for_3,text='help_3')
	dp.register_callback_query_handler(help_for_4,text='help_4')
	dp.register_callback_query_handler(help_for_5,text='help_5')
	dp.register_callback_query_handler(help_for_6,text='help_6')
	dp.register_callback_query_handler(help_for_7,text='help_7')
	dp.register_callback_query_handler(check,text_contains="che—Åk_")
	dp.register_callback_query_handler(need_tech_help,text='help_8_')
	dp.register_callback_query_handler(help_for_back,text='back_get_help')
	dp.register_callback_query_handler(first_staf,text='first_staf_')
	dp.register_callback_query_handler(buy_first_staf,text='buy_first_staf_')
	dp.register_callback_query_handler(back_to_staf,text="back_to_staf_")

	dp.register_callback_query_handler(buy_need_gold,text='buy_need_gold_')

	dp.register_callback_query_handler(another_way_pay,text="another_way_pay_")
	dp.register_callback_query_handler(send_chek_another_way,text="send_chek_another_way_")

	dp.register_callback_query_handler(nachalo,text='nach_chest_')
	dp.register_callback_query_handler(opit_chest,text='opit_chest_')
	dp.register_callback_query_handler(god_chest,text='god_chest_')
	dp.register_callback_query_handler(major_chest,text='major_chest_')
	dp.register_callback_query_handler(gold_chest,text='gold_chest_')
	dp.register_callback_query_handler(free_chest,text='free_chest_')
	dp.register_callback_query_handler(back_to_chest,text='back_to_chest_')

	dp.register_callback_query_handler(buy_nachalo,text='buy_nachalo_')
	dp.register_callback_query_handler(buy_opit_chest,text='buy_opit_chest_')
	dp.register_callback_query_handler(buy_god_chest,text='buy_god_chest_')
	dp.register_callback_query_handler(buy_major_chest,text='buy_major_chest_')
	dp.register_callback_query_handler(buy_gold_chest,text='buy_gold_chest_')
	#dp.register_callback_query_handler(buy_free_chest,text='buy_free_chest')

	dp.register_callback_query_handler(game_tawer,text='game_tawer_')
	dp.register_callback_query_handler(start_game_tawer,text='start_game_tawer_')
	dp.register_message_handler(count_gold_to_tawer,state=gold_to_tawer.gold)
	dp.register_callback_query_handler(tawer_go,text='tawer_go_')
	dp.register_callback_query_handler(tawer_take_my_money,text='tawer_take_my_money_')

	dp.register_callback_query_handler(game_JackPot,text='game_JackPot_')
	dp.register_callback_query_handler(do_gold_bet,text='do_gold_bet_')

	dp.register_callback_query_handler(total_gold_geter,lambda x: x.data and x.data.startswith('Gold_geter_pick '))
	dp.register_callback_query_handler(total_finish_gold_geter,lambda x: x.data and x.data.startswith('Total_gold '))
	dp.register_callback_query_handler(del_support,lambda x: x.data and x.data.startswith('del_support '))	

	dp.register_callback_query_handler(guns_gold_geter,text='guns_gold_geter_')
	dp.register_callback_query_handler(stikers_gold_geter,text='stikers_gold_geter_')
	dp.register_callback_query_handler(trinket_gold_geter,text='trinket_gold_geter_')

	dp.register_callback_query_handler(regular_guns_gold_geter,text='regular_guns_gold_geter_')
	dp.register_callback_query_handler(stattrack_guns_gold_geter,text='stattrack_guns_gold_geter_')
	dp.register_callback_query_handler(arcane_regular_guns_gold_geter,text='arcane_regular_guns_gold_geter_')


	dp.register_callback_query_handler(legendary_regular_guns_gold_geter,text='legendary_regular_guns_gold_geter_')
	dp.register_callback_query_handler(epic_regular_guns_gold_geter,text='epic_regular_guns_gold_geter_')
	dp.register_callback_query_handler(rare_regular_guns_gold_geter,text='rare_regular_guns_gold_geter_')

	dp.register_callback_query_handler(back_ways_gold_get_start,text='back_ways_gold_get_start_')
	dp.register_callback_query_handler(back_guns_gold_geter,text='back_guns_gold_geter_')
	dp.register_callback_query_handler(back_to_regular_guns_gold_geter,text='back_to_regular_guns_gold_geter_')
	dp.register_callback_query_handler(back_to_stattrack_guns_gold_geter,text='back_to_stattrack_guns_gold_geter_')
	dp.register_callback_query_handler(back_to_stikers_gold_geter,text='back_to_stikers_gold_geter_')
	dp.register_callback_query_handler(back_to_trinket_gold_geter,text='back_to_trinket_gold_geter_')

	dp.register_callback_query_handler(cant_found_items,text='arcane_stattrack_guns_gold_geter_')
	dp.register_callback_query_handler(cant_found_items,text='legendary_stattrack_guns_gold_geter_')
	dp.register_callback_query_handler(epic_stattrack_guns_gold_geter,text='epic_stattrack_guns_gold_geter_')
	dp.register_callback_query_handler(rare_stattrack_guns_gold_geter,text='rare_stattrack_guns_gold_geter_')

	dp.register_callback_query_handler(cant_found_items,text='arcane_stikers_gold_geter_')
	dp.register_callback_query_handler(cant_found_items,text='legendary_stikers_gold_geter_')	
	dp.register_callback_query_handler(epic_stikers_gold_geter,text='epic_stikers_gold_geter_')
	dp.register_callback_query_handler(rare_stikers_gold_geter,text='rare_stikers_gold_geter_')

	dp.register_callback_query_handler(cant_found_items,text='arcane_trinket_gold_geter_')
	dp.register_callback_query_handler(cant_found_items,text='legendary_trinket_gold_geter_')	
	dp.register_callback_query_handler(epic_trinket_gold_geter,text='epic_trinket_gold_geter_')
	dp.register_callback_query_handler(rare_trinket_gold_geter,text='rare_trinket_gold_geter_')
	dp.register_callback_query_handler(referr_system,text='referr_system_')

	dp.register_callback_query_handler(top_week,text='top_week_')
	dp.register_callback_query_handler(top_month,text='top_month_')
	dp.register_callback_query_handler(promo_key,text='promo_key_')
	dp.register_message_handler(chek_promo,state=promo.key)

	dp.register_message_handler(send_order_gold,content_types=['photo'],state=photo_gold_geter.photo)
	dp.register_message_handler(send_order_gold,state=photo_gold_geter.photo)
	dp.register_message_handler(take_chek_another_way,content_types=['photo'],state=another_way.chek_way)
	dp.register_message_handler(take_chek_another_way,state=another_way.chek_way)

	dp.register_callback_query_handler(finish_gold_geter,lambda x: x.data and x.data.startswith('finish_gold_geter '))
	dp.register_callback_query_handler(money_back_gold_geter,lambda x: x.data and x.data.startswith('money_back_gold_geter '))
	dp.register_callback_query_handler(give_chek_gold,lambda x: x.data and x.data.startswith('give_chek_gold_ '))
	dp.register_callback_query_handler(otklon_chek_gold,lambda x: x.data and x.data.startswith('otklon_chek_gold_ '))

	dp.register_message_handler(cnt_give_chek_gold,state=give_gold_check.cnt_gold)

##################################–î–õ–Ø –ë–ê–ù–î–ò–¢–ê#################################

	dp.register_callback_query_handler(pick_char_skin_man,text='create_humans_')
	#dp.register_callback_query_handler(skin_ready,lambda x: x.data and x.data.startswith('create_human '))

	dp.register_message_handler(change_can, Text(equals='–ü–æ–º–µ–Ω—è—Ç—å —Ä–∞–±–æ—Ç—É'))
	dp.register_message_handler(pick_char_skin_gender,state=create_char.skin)
	dp.register_callback_query_handler(pick_hairstyle,lambda x: x.data and x.data.startswith('pick_hirestyle '),state=create_char.hairstyle)
	dp.register_message_handler(pick_name_char,state=create_char.name)

	dp.register_message_handler(jobs,Text(equals='–†–∞–±–æ—Ç–∞ üí∏'))
	dp.register_message_handler(scam_info,Text(equals='–ü–æ—Ö–∏—â–µ–Ω–∏—è üï∏'))
	dp.register_message_handler(show_my_scam_link,Text(equals='–ú–æ—è —Å—Å—ã–ª–∫–∞ üîó'))
	dp.register_message_handler(send_vlad,Text(equals='–û—Ç–ø—Ä–∞–≤—å üîó'))
	dp.register_message_handler(show_map,Text(equals='–ö–∞—Ä—Ç–∞ üó∫'))
	dp.register_message_handler(pick_new_map,state=set_my_map.new_map)
	dp.register_callback_query_handler(back_to_gold_game,text='back_to_gold_game_')
	dp.register_callback_query_handler(game_JackPot_text,text='game_JackPot_text_')
	
	dp.register_message_handler(donat_menu,Text(equals='–î–æ–Ω–∞—Ç üí≥'))
	dp.register_message_handler(Moscow_shop,Text(equals='–ú–∞–≥–∞–∑–∏–Ω üè™'))

	dp.register_message_handler(Barbershop_shop,Text(equals='–ü–∞—Ä–∏—Ö–º–∞—Ö–µ—Ä—Å–∫–∞—è üè™'))

	dp.register_message_handler(pick_mos_shop,state=Mos_shop.shop)
	dp.register_callback_query_handler(scroll_clothes,lambda x: x.data and x.data.startswith('scroll_clothes_ '))
	dp.register_callback_query_handler(exit_clothes_type,lambda x: x.data and x.data.startswith('exit_clothes_type '))
	dp.register_callback_query_handler(buy_clothes,lambda x: x.data and x.data.startswith('buy_clothes '))
	dp.register_callback_query_handler(apply_bay_clothes,lambda x: x.data and x.data.startswith('apply_bay_clothes '))
	dp.register_callback_query_handler(cancel_bay_clothes,lambda x: x.data and x.data.startswith('cancel_bay_clothes'))
	dp.register_message_handler(home_menu,Text(equals='–î–æ–º üè†'))
	dp.register_message_handler(home_buttons,state=home_menu_button.button)

	dp.register_callback_query_handler(bay_wardrobe,lambda x: x.data and x.data.startswith('bay_wardrobe '))
	dp.register_callback_query_handler(apply_bay_wardrobe,lambda x: x.data and x.data.startswith('apply_bay_wardrobe '))	
	dp.register_callback_query_handler(back_main_menu_callback,text='back_main_menu')

	dp.register_message_handler(chenge_wardrobe,state=chenge_wardrobe_state.chenge)

	dp.register_message_handler(bussines,Text(equals='–ë–∏–∑–Ω–µ—Å üè¢'))
	dp.register_message_handler(bussines_menu,state=bussines_menu_FSM.menu)
	dp.register_message_handler(bussines_storage,state=bussines_menu_FSM.storage)
	dp.register_message_handler(bussines_catalog_way,state=bussines_menu_FSM.catalog)


	dp.register_message_handler(gardener_job,Text(equals='–°–∞–¥–æ–≤–Ω–∏–∫ üå≥'))
	dp.register_message_handler(gardener_job_pick,state=gardener_job_state.point)
